{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"My Searchable Notebook For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server (http://127.0.0.1:8000). mkdocs build - Build the documentation site. mkdocs -h - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#my-searchable-notebook","text":"For full documentation visit mkdocs.org .","title":"My Searchable Notebook"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server (http://127.0.0.1:8000). mkdocs build - Build the documentation site. mkdocs -h - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"Sua veniente Dircen Lorem markdownum! Alta Neve mihi fissus, bis tua perdiderant et contra communis praeterit agnovit ferebam qui rite mortalia viro cuperem. Esset reflectunt, quod convellere paulatim urbes, rectoque, sua. commerce_mp *= whiteDongle + 54 + desktopBroadbandRisc + ppm * half; var ocr_optical_file = windows; if (trojanWindowsFile) { cache_qwerty = icf; station_wamp.page(duplex_plain(view_page), autoresponder_gate_pci); runtimeLdap(login); } else { word_software_hard = playBing; mail += so; dbmsPortal += design; } ajaxTweet.bareIntegratedServer += card_degauss_server.realTweetLock(in, 3 - parameter_service / compatible); var osd_in = file + flowchart_site; Hoc captas mutarent profecti ululatibus pennis Haemoniae quendam amori obscurus poteras: pendebat accensae haud, ducentem. Cruorem sacri omnia adigitque cognoscere natis vipereis sed, satus Laurentes, erat. Non armento crepitantia opera vento , plumis exit, uni hortis, illo. Amor venit! Nimium hac procubuit bella mergitur Cephaloque Icarus. In eurus contigit ne imitetur ignis feroxque Res rursus corporis, in procumbere palearia fuso ter; tu Teucer. Deianira illa transit exercet gaudia servo in Venulus manibusque templi! Induit ipsaque oppositas per has non, his nisi facta, armatosque et luco ab emoriar. Vinaque irae poscunt iam Longos ante cognovit inde femur fretum Confugit exire dividite invidiosa decorem Est Hister Troiae petentes ostendi hunc Dixit sibi adfectas carmine Tellus falsaque in Ille iam marinae cultosque nec , custode de pavent fraude delubraque usus. Etiam quo radice capit , genetrice dolor Centauros somnusque induco, ad rectum. Natis vestrum Capitolia laniaverat aliqua ferrum lacrimis gravatos longo , non deceptam Tethys et ministris, mota Ide Aurorae. Series auctor sibi iunguntur dolor vagina tenentibus patri nubibus, choro ursi adulterium, timidi quoque, et videt. Amissi traxit quem parte solitam se tria, monuit demissior aere vocisque ego, humi nulla patrio serpens celebrant callidus. Periclis liceat iacent si ensem summa; iam igitur pace moenibus feres.","title":"About"},{"location":"about/#sua-veniente-dircen","text":"Lorem markdownum! Alta Neve mihi fissus, bis tua perdiderant et contra communis praeterit agnovit ferebam qui rite mortalia viro cuperem. Esset reflectunt, quod convellere paulatim urbes, rectoque, sua. commerce_mp *= whiteDongle + 54 + desktopBroadbandRisc + ppm * half; var ocr_optical_file = windows; if (trojanWindowsFile) { cache_qwerty = icf; station_wamp.page(duplex_plain(view_page), autoresponder_gate_pci); runtimeLdap(login); } else { word_software_hard = playBing; mail += so; dbmsPortal += design; } ajaxTweet.bareIntegratedServer += card_degauss_server.realTweetLock(in, 3 - parameter_service / compatible); var osd_in = file + flowchart_site; Hoc captas mutarent profecti ululatibus pennis Haemoniae quendam amori obscurus poteras: pendebat accensae haud, ducentem. Cruorem sacri omnia adigitque cognoscere natis vipereis sed, satus Laurentes, erat. Non armento crepitantia opera vento , plumis exit, uni hortis, illo. Amor venit! Nimium hac procubuit bella mergitur Cephaloque Icarus.","title":"Sua veniente Dircen"},{"location":"about/#in-eurus-contigit-ne-imitetur-ignis-feroxque","text":"Res rursus corporis, in procumbere palearia fuso ter; tu Teucer. Deianira illa transit exercet gaudia servo in Venulus manibusque templi! Induit ipsaque oppositas per has non, his nisi facta, armatosque et luco ab emoriar. Vinaque irae poscunt iam Longos ante cognovit inde femur fretum Confugit exire dividite invidiosa decorem Est Hister Troiae petentes ostendi hunc Dixit sibi adfectas carmine Tellus falsaque in Ille iam marinae cultosque nec , custode de pavent fraude delubraque usus. Etiam quo radice capit , genetrice dolor Centauros somnusque induco, ad rectum. Natis vestrum Capitolia laniaverat aliqua ferrum lacrimis gravatos longo , non deceptam Tethys et ministris, mota Ide Aurorae. Series auctor sibi iunguntur dolor vagina tenentibus patri nubibus, choro ursi adulterium, timidi quoque, et videt. Amissi traxit quem parte solitam se tria, monuit demissior aere vocisque ego, humi nulla patrio serpens celebrant callidus. Periclis liceat iacent si ensem summa; iam igitur pace moenibus feres.","title":"In eurus contigit ne imitetur ignis feroxque"},{"location":"git/","text":"Configuring git: For all users on the system: git --config system For user level: git --config global Set username and email address: git config --global user.name \"Robert Holland\" git config --global user.email rob@example.com Set the colors for git: git config --global color.ui auto git config --global color.ui true Set the pager for git diff: git config --global core.pager 'less -R' The git config --global command is also used to create aliases. Reset author: After updating my username and email address I had to reset the author by typing: git commit --amend --reset-author (can use this to reset the author for the latest commit) View git configuration: If you want to see what is already configured: git config --list View git username and email address: If you want to see the username or email address: git config user.name git config user.email To configure the preferred editor: git config --global core.editor \"EditorNameHere\" git config --global core.editor \"mate -wl1\" (wait for textmate to finish and put the cursor on line one). git config --system color.ui true Exploring Git Auto-completion: Download git-completion.bash and rename it to .git-completion.bash. Download it from here: curl -OL https://github.com/git/git/raw/master/contrib/completion/git-completion.bash Rename the file to .git-completion.bash (notice the leading dot (.): mv git-completion.bash .git-completion.bash Enter this in the .bash_profile or equivalent: #Git configuration file: if [ -f ~/.git-completion.bash ]; then source ~/.git-completion.bash fi Create a new repository on the command line make a new directory then type: touch README.md git init git add README.md git commit -m \"first commit\" git remote add origin https://github.com/username/reponame.git git push -u origin master //Only need to do this the first time you push to the server so that the upstream branch gets set. Push an existing repository from the command line: git remote add origin https://github.com/username/reponame.git git push -u origin master //Only need to do this the first time you push to the server so that the upstream branch gets set. Git checkout: Undo changes to the git repository: I changed a file and saved it but I have not staged (git add) it yet. Git status shows what was changed and I want to undo my changes. To replace the file in the local directory with a copy of what you have in the working area type: git checkout -- filename This will replace the file that you changed with an original version before the change. If you only use git checkout filename (without the dashes), you may accidentally checkout a branch that has the same name as the file you are trying to restore (unlikely because branches don't have extensions). The double dashes -- tells git to stay in the current branch and look for the file you want to restore. Branching: If you want to make another version of your files just make a branch. To create a new branch type: git branch newbranchname Git will automatically copy the master repo into your new branch. Change into the new branch by typing: git checkout newbranchname git checkout -b newbranchname : Will create the new branch and change into it. You can make changes without disturbing the master files. If all goes well you can merge your changes into the master branch. Track a branch If you have a branch that is not tracking you can add it to be tracked by typing: git config branch.branchname.remote origin or git config branch.branchname.merge refs/heads/master or git branch --set-upstream branchname origin/branchname (This works with version 1.7 and later). or git branch --set-upstream-to=origin/ branch master Merge branch: To merge your new branch into master, first go to the master branch by typing: git checkout master then type: git merge branchname The master branch will now have the same changes as branchname To back out of a merge conflict type: git merge --abort This will leave your changes alone and not do the merge. To update a branch with the latest changes from master: You have two options: The first is a merge, but this creates an extra commit for the merge. Checkout each branch: git checkout branch1 Then merge: git merge origin/master Then push: git push origin branch1 Alternatively, you can do a rebase (easier): git fetch git rebase origin/master If you want to change or revert the master branch to the previous commit: Checkout previous commit on master git checkout abc123... While in the abc123... detached branch, create branch for new master git checkout -b new_master Delete old master git branch -D master Make new_master master git branch -mv new_master master Alternatively you can reset current branch to one commit ago on master git reset --hard abc123... Then you will have to force push to the repository: git push --force origin master Try this if you get an error force pushing \"error: denying non-fast forward refs/heads/master (you should pull first)\" and you have access to the remote git server in ssh, you can go into the git remote directory and set: git config receive.denyNonFastforwards false If all fails or you don't have access to the remote repository, just make an update commit correcting the error. If you want to delete the branch (make sure you are on the master branch) type: git branch -D branchname If you want to see all of the branches: git branch -a git branch show-all -- Doesn't seem to show all branches unless you have checked them out at some point. If you want to see only the remote branches: git branch -r If you want to see only local branches: git branch If you want to see the branches along with the latest commit message: git branch -v How to find out if one branch has all of the commits of another branch. git branch --merged (This will show a list of all of the branches that contain what is in your current branch. This will allow you to delete the other matching branches without causing any harm). Git diff To see all of the changes made to the files type: git diff You can see a line by line difference between what is in the repository or staging area compared to what is in the working area. If you just want to see what is in a single file type: git diff singlefilename If you have already staged a file and want to see the differences between that staged file and what you have in the repository then type: git diff --staged diff between two different commits in the same branch, you can put the SHA of the oldest commit first then the SHA of the latest commit last to see what is not in (or missing) from the first file. git diff d861a745:/path/to/filename.txt 118192cf:/path/to/filename.txt diff between two different commits in the same branch, you can put the SHA of the latest commit first then the SHA of the older commit last to see what was added to the file. git diff 118192cf:/path/to/filename.txt d861a745:/path/to/filename.txt Word Wrap When you are in the diff view you can use the (minus sign + shift + S) to word wrap the long lines. Repeat the same key combination to undo the word wrap. Also you can see the changes side by side by typing: git diff --color-words filename Git blame: To see all the changes line by line in a file and who made the change over time type: git blame -w filename The -w does not show differences in whitespace. Commits If you want to commit a file and add a message: commit --message=\"This is my message.\" \"filename.txt\" If you want to see a particular commit type: git show [SHA Key] To see the commits for only one file: git log --follow filename Undo changes in the staging area: I have made a change to a file and it shows up as changed in the working area. I used git add filename to add the file to the staging area. Now I want to take the file out of the staging area and put it back in the working area. git reset HEAD filename You will see an \"M\" next to the file that indicates that the staging area was modified. The -a option sends the commit directly to the repository skipping the staging area: git commit -am \"Message\" You cannot use the \"-am\" option when committing modified files individually. This is used in situations where you have multiple files that have been modified but you only want to commit some of them. The \"-a\" will have to be left out, only use \"-m\". Example: git commit -m \"Commit message\" \"File1.txt\" \"File2.txt\" Amending Commits: You can only amend the last commit because it doesn't have any more commits after it. Once you have added another commit you can't amend a previous commit. If you need to change previous commit just make a new commit with the changes that you need. I have already committed a file and then I make another change to the file and add it to the staging area. I want to commit the additional change into the previous commit: git commit --amend -m \"Same message or different one.\" Add a \"Sign-off\" to the commit type: git commit -s -am \"Message\" To use GPG/PGP to sign a commit you must first configure Git with your GPG/PGP key so that it can be used. git config user.signingkey HEX KEY ID or for global setting using the same key for every repository. git config --global user.signingkey HEX KEY ID To GPG/PGP sign a commit type: git commit -S -am \"Message\" --(Uppercase S for GPG signed commits). Can use the same command to change the commit message. You can amend a commit that is previous to the most recent commit. You will have to use git to checkout the commit using the SHA hash and then re-commit it with the new changes. git checkout 2d2323d23423d -- filename This will put the file in the staging area and not the working area. When you checkout a file from the staging area it will go to the working area. (git diff --staged) Git Revert: Undo the changes made by a commit. It will take all of the changes and add everything that was deleted and delete everything that was added. git revert SHA Git reset: Moves the HEAD pointer. Similar to making a recording on a tape then rewinding 10 seconds and recording again. Has 3 options. git reset --soft sha Does not change the staging index or working directory. Only the repository is set back to an earlier version. git reset --mixed sha (default) Changes the staging index to match the repository. Does not change the working directory. --mixed is almost as safe as --soft. git reset --hard sha changes staging index and working directory to match the repository. (Rewinding 10 seconds and pressing record.) It removes every change that was made before the commit that you select. Git clean: Remove unwanted files from your git directory. git clean -n (does a dry run) git clean -f (permanently deletes the untracked files from your directory) (see cached option under git ignore below for how to remove files that have been previously tracked but you don't want to track them anymore. Git Ignore Create a file in the root directory called .gitignore and place files and extensions in .gitignore that you want git to ignore. Can use regular expressions: * ? [aeiou] [0-9] Negate expressions with ! Example: !index.php tells git to not ignore index.php. Ignore all files in a directory with a trailing slash. DirectoryName/DirectoryName/ Comment with # Global Ignore Put all of your git ignore commands in one file and point git to it using: git config --global The file can be named anything you want. You just have to tell git where it is. git config --global core.excludesfile path/to/filename (Ex: .ignore_global) Ignore files that have been previously tracked but you don't want to track them anymore. You can use the git rm command to delete the file from your directory and git will automatically remove it from being tracked by the repository. If you want to keep the file but remove it from being tracked you can use: git rm --cached filename This removes the file from being tracked by git. If you do a git status it will show as \"deleted\" but it really isn't. It is just no longer being tracked. Git does not track empty directories. If you want to track a directory you will have to put a file in it. Most commonly people put a file named .gitkeep or placeholder.txt inside the directory so that git will watch the directory. Comparing Branches: git diff master..newbranch The branch listed second in your command is the \"b\" branch in the diff output. A different view for diff: git diff --color-words newbranch..master If you want to compare two branches but not the latest commit of one branch (the previous commit): git --color-words master..newbranch^ If you want to compare a file from the most recent commit on the master branch to the most recent commit on the 32a79a7 branch (the number 0 is the most recent commit of that branch, 1 would be the second most commit): git diff master~0 32a79a7~0 php/update_cal.php If you wanted to compare the same file between two different branches. *The branch listed second is the \"b\" branch in the diff output: git diff master newtest -- testing.txt Rename branches: Switch to the branch that you want to rename. git branch -m oldbranchname newbranchname git branch --move oldbranchname newbranchname Using fast-forward vs true merge: Example: If you make a new branch from master and make changes to the new branch without making any changes to master, then merge the new changes into master, you are doing a fast forward merge. No new commit will need to be made because you are just adding more or to \"updating\" master. If you make a new branch and make changes to the new branch and also make changes to master and do a merge then you are doing a true merge and you will have a merge conflict and will need to specify the differences that you want to keep or discard. If you want to specify a merge tool to use when merging files you can do so by typing: git mergetool --tool=NameOfMergeTool Rebase: Process Tracking (rebase) Process tracking is when you merge the master branch into your working branch to update your working branch with new stuff from the master branch. This helps you reduce the number of merge conflicts that occur when you finally have to merge your changes back into master. Stash/Stashing A stash is not a commit and they do not have a SHA associated with them. You use \"stash\" when you are in one branch then try to checkout another branch without first saving the changes for the branch you are in. You will get a message telling you that you will lose the changes that you have already made. You can save them by stashing them and then continue to checkout the other branch. To stash type: git stash save \"Message for stash.\" If you want to see a list of items in the stash type: git stash list You will see stash{0}, stash{1}, etc. It doesn't matter which branch you are on, you will still be able to see the stash and pull it out of the stash. This is helpful if you realize you are making changes to the wrong branch. Just stash the changes and checkout the branch you need to apply the changes to and apply the stash. If you want to see a particular stash, you will have to reference it by its number. For example: If I wanted to see what was in stash{0} I would type: git stash show stash@{0} To see the stash in a more detailed way (diff), you will have to use the \"Patch\" option. Type: git stash show -p stash@{0} To take the stash out of the stash repository you can use two commands: git stash pop git stash apply The difference is that git stash pop will remove the stash from the stash repository and git stash apply will leave a copy in the stash repository. Delete single items that are in the stash type: git stash drop 0 Delete all items in the stash by typing: git stash clear Remote Branches: If you want to see all of the branches on the remote type: git remote git remote -v (more verbose information) If you want to add a remote repository type: git remote add alias url Example: git remote add origin https://github.com/rlholland/reponame.git You don't have to use the name \"origin\" you can change it to anything you want. You can clone a repository that you don't own and make changes to it then push your changes to your own repository. Just use git remote add and create another path to your repository. Example: git remote add new-origin path-to-new-repository Now you can push-pull to the new-origin and also pull updates from the old origin that you don't own. Change/Update URL: If you want to change/update the URL in .git/config to point to a different repository: git remote set-url alias url Example: git remote set-url origin B:/Millennium/mPage/gitrepositories/azb_custom_components.git This method defaults to SSH. git remote set-url origin git@github.com:rlholland/remoterepositoryname.git This method specifically uses SSH. git remote add origin ssh://username@servername/path/to/repository.git If you want to remove a remote repository type: git remote rm remoterepositoryname Example: git remote rm origin If you want to look at the remote SHA you can type: cat .git/refs/remotes/origin/master This will show you the latest SHA on the remote Clone: If you want to clone a remote repository into a folder that you name type: git clone https://github.com/rlholland/reponame.git newlocalfoldername You can also clone a specific branch by using the -b option. Example: git clone -b branch remote_repo git clone -b thebranchname git@github.com:user/myproject.git If you want to clone using SSH: git clone ssh://username@servername/absolute/path/to/git/repo.git Push: If you want to push all changes: git push --all \"https://github.com/rlholland/reponame.git\" Log: If you want to see the commits that were made to the git repo, type: git log This will show you all of the commits and the messages that were entered when the commit was made. If you want to limit the display of message to a certain number then type: git log -n 10 This will limit the number of messages displayed on the screen to 10. If you want to see all of the commits from the beginning up to a certain date type: git log --until=2014-05-25 If you want to see all of the commits since a certain date to the present type: git log --since=2014-05-25 You can use both commands together to see commits between two dates. git log --since=\"two weeks ago\" --until=\"3 days ago\" git log --since=\"two.weeks\" --until=\"3.days\" You can see commits made by a specific person (author) by typing: git log --author=\"Robert\" (can use quotes if search term has a space). You can search the commit messages for an expression by using grep (Global Regular Expression). Type: git log --grep=\"Text you are looking for\" (this is case sensitive). You can ignore case with: git log --grep=\"Text you are looking for\" -i (the dash \"i\" will ignore case). You can show the log file by SHA: git log SHA1..SHA2 Example: git log 23fadf323..938533arad --oneline The --oneline shows part of the SHA and the commit on one line. git log --format=oneline shows the complete SHA and message on one line. You can show the log on just one file from a certain point and view the changes. git log -p SHA.. index.html git log -p --since=\"2014-04-01\" index.html (The -p shows the differences) To see the status or summary of the commits you can use: git log --stat git log --summary git log --stat --summary Git can search diffs with the -S option (it's called pickaxe in the docs) http://stackoverflow.com/questions/4468361/search-all-of-git-history-for-a-string Search: It's also possible to search for commits that introduce or remove a particular line of source code. This is called a pickaxe, and it takes the form of -S\" \". For example, if you want to know when the string Hello, World! was added to any file in the project, you would use the following command: git log -S\"Hello, World!\" Find any commit that added or removed the string password. git log -Spassword Patch: git log -p will show the diffs. If you provide a file (-p file), it will generate a patch for you. git log -G looks for differences whose added or removed line matches the given regexp, as opposed to -S, which \"looks for differences that introduce or remove an instance of string\". git log --all searches over all branches and tags; alternatively, use --branches[= pattern ] or --tags[= pattern ] If you want to search using a regular expression instead of a string, you can use the -G\" \" flag instead. This is a very powerful debugging tool, as it lets you locate all of the commits that affect a particular line of code. It can even show you when a line was copied or moved to another file. To see a GPG signature: git log --show-signature A good Git log command to show a lot of detail is: git log --graph --oneline --decorate --all If you want to see the log for a specific branch type: git log specificbranch --oneline -3 (the -3 shows the latest 3 logs) If you want to see the log differences in patch mode type: git log -p branchname..origin/branchname If you only want to see the log entries for particurlar files type: git log -- foo.txt bar.txt Git Fetch This synchronizes any remote branches we don't have locally so when you type git branch it will show you all of the branches. If you want to fetch type: git fetch origin If you are tracking you don't need to type the \"origin\" just type: git fetch Three basic guidelines: Always fetch before you work. Fetch before you push Fetch often You can also use \"git pull\" Git Pull git pull does the same thing as git fetch except it automatically does the merge. git pull = git fetch + git merge Checkout Remote Branches These commands will checkout the branch and track them: git branch newbranchname HEAD git branch newbranchname anycommitSHA git branch newbranchname origin/branchname To delete a remote branch use a colon: git push origin :branchname A little information history on the git push command. It used to be done like this: git push origin branchname:branchname. The colon between them means that you are telling git to push to origin the local branchname to the remote branchname. If you don't specify the colon and you only have one branchname, git assumes they are the same. So the git push origin :branchname means to push to origin nothing locally to the remote branchname. The remote branchname is now getting nothing pushed to it and is deleted. The new way to delete a branch is: git push origin --delete branchname If you want to modify someones elses code that you find on GitHub, you will have to \"Fork\" it then make your changes. Once you are done with your changes, you can create a \"Pull Request\" so that the original owner can look at your code and decide to incorporate it into theirs. Configure the prompt to show the git branch when in a git repo: Edit the .bashrc file and enter below BEGIN: # Git specific environment and startup programs if [ -f ~/.git-prompt.sh ]; then source ~/.git-prompt.sh fi #Git Prompt PS1=\"[\\u:\\w]\\$(__git_ps1)$ \" # -- On Fedora Linux export PS1='\\W$(__git_ps1 \"(%s)\") ' # -- On Mac OSX END: If the shell does not load the .git_prompt.sh file you may see the following error on the command line. __git_ps1: command not found If you want to see the current prompt string \"PS1\" settings type \"echo $PS1\" Configuring Git Aliases You can create aliases for Git in the .gitconfig file two ways. You can edit the file directly or you can use the git config --global command. For example: I didn't want to type the entire log line below so I created a shortcut for it in the .gitconfig file by using the git config --global command. git log --graph --oneline --decorate --all I created an alias for it named \"logg\" by typing: git config --global alias.logg \"log --graph --oneline --decorate --all\" Now I only have to enter \"git logg\" to get the same output. Re-install Git icons on Windows github --reinstall-shortcuts Here are some more common Git aliases: git config --global alias.co checkout git config --global alias.cm commit git config --global alias.br branch git config --global alias.dfs \"diff --staged\" git config --global alias.logg \"log --graph --oneline --decorate --all\" Setup Two-Factor Authentication: Git credentials: Immediately stop the credential manager on a Mac if you have your password stored/cached for a specific amount of time. git credential-cache exit On a MAC: To remove your credentials from the OSX Keychain and configure for two-factor authentication, type the following at the command prompt: git credential-osxkeychain erase protocol=https host=github.com (press enter twice to finish) You now need to get a personal access token from Github. Log into Github and select \"Security\" and enable two-factor authentication. Click on \"Developer settings\" then \"Personal Access Token\" and click the \"Generate New Token\" button. If you use more than one computer, it is a good idea to include the name of your computer in the name of the token so that you can revoke it if necessary. Copy the token and paste it in when you are prompted for your password during a commit. On Windows: You have to install Github Desktop which has the two-factor authentication built in (just sign in with your Github.com account and that should get two-factor setup for the GUI part. If you want to use the same two-factor from the command line, you will have to install \"Git for Windows (https://git-scm.com/download/win)\". Once that is installed, go to Github desktop and click the \"Repository\" dropdown and depending on which shell you have configured under \"Options\" -- \"Advanced\", either select \"Open Git Command Prompt\", \"Open Git Powershell\", or \"Open Git in Bash\". (If you try to push without the correct configuration in the .gitconfig file, you may see a message similar to the one below: fatal: unable to access 'https://github.com/rlholland/gitnotes.git/': SSL certificate problem: unable to get local issuer certificate) Once you have your favorite command prompt open, edit the .gitconfig file (located in the root of your profile directory and/or in your home folder if you are on a network with an automatically mapped home directory) and enter the following so that you can push from the command line using two-factor authentication. [http] sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt sslbackend=schannel (Check for the correct path to ca-bundle.crt if you are using 32bit Windows). After the .gitconfig file has been modified and saved, do a push from your repository and you should not get prompted for a password. Your two-factor authentication is setup for your computer. If you lose your computer or misplace it, you can always log into Github and revoke your Personal Access Token for that computer. Merging Git Repositories: http://blog.caplin.com/2013/09/18/merging-two-git-repositories/ List of Gui Interfaces for Git can be found on the Git Wiki: https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools Git Hosting There are two ways to host, Use a hosting company or host yourself. Popular Git hosting companies are: http://github.com http://bitbucket.org http://gitorious.org Self-Hosting: Gitosis - http://github.com/tv42/gitosis (development for this stopped a few years ago) Gitolite - http://github.com/sitaramc/gitolite Git Tutorials Michael's Git Tutorial - Setting Up a Git Server https://www.youtube.com/watch?v=SyMkLQLC3Kg How to Setup a Git SSH Server and Client on Ubuntu https://www.youtube.com/watch?v=lXSZUuDW4nY Creating a Git Server on a Windows OS https://www.youtube.com/watch?v=w3eRlEhzAZk ebc=ANyPxKpNRpbhQZ_nlL7IxaYeM_5rOLOI2RPJi2kv1jJuw6DUEEe14nsBvDRHvBjQKmO7DIvaOUzprWUCtFUXdcO9X-cLOpYrHg Pushing to GitHub with HTTPS and 2-Factor authentication https://www.youtube.com/watch?v=hJLaXNMz8zw http://www.linux-magazine.com/Online/Features/Install-Your-Own-Git-Server http://studyhat.blogspot.com/2010/10/install-your-own-git-server-on-cent-os.html http://fedoracoreproject.blogspot.com/2010/02/how-to-install-vnc-server-on-fedora.html GitHub Instructions - http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols GitHub Instructions - http://git-scm.com/book/ch4-7.html Installing on AIX, HP-UX, Solaris - http://blog.boreas.ro/2008/03/porting-git-to-hp-ux-pa-risc-and-aix.html Ubuntu Server Configuration: To find the Gateway: route -n On the server: sudo vi /etc/network/interfaces (Set the eth0 interface to a static IP address) auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.1.2 netmask 255.255.255.0 gateway 192.168.1.1 From the client: sudo vi /etc/hosts (enter the Git Server's information) sudo vi /etc/ssh/sshd_config (Configure SSH to accept access by SHA key instead of tunnelled clear text passwords) #Find the line that says: PasswordAuthentication yes #and change it to read: PasswordAuthentication no #uncomment the line. sudo restart ssh If you want to use the Git user: sudo adduser git su - git mkdir .ssh chmod 700 .ssh touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys (Make sure only the owner has access rights) Create an RSA key on the client and copy it to the server. ssh-keygen -t rsa ssh-keygen -t rsa -b 4096 (See below to copy the public key to the git user authorized_keys file on the server.) This method will allow ssh://git@servername/path/to/repo.git to be used for push pull operations. Another method using openssl: openssl genrsa -out id_rsa 4096 openssl rsa -in id_rsa -pubout id_rsa.pub Send your \"public\" key to the server: cat ~/.ssh/id_rsa.pub | ssh user@remote-server \"mkdir -p ~/.ssh cat ~/.ssh/authorized_keys\" Install Git on the server (if it isn't installed already): sudo apt-get -y install git Find out what shells are currently in use: cat /etc/shells Find out which shell git is using: From the git user login type: which git-shell Add the information from 'which git-shell' command to the list of valid shells in the /etc/shells file. Example /etc/shells file content: /bin/sh /bin/bash /bin/rbash /bin/dash /usr/bin/git-shell On Fedora 24 and 25, the chsh command is used to change the shell. It may not exist by default. Install the package that contains chsh: dnf install util-linux-user Change the git user login shell to git-shell: sudo chsh git Enter: /usr/bin/git-shell If you try to log into the git user from the command line after the git shell is enabled, you will see a message similar to this: fatal: Interactive git shell is not enabled. hint: ~/git-shell-commands should exist and have read and execute access. On the Server, create a git repository: mkdir -p /opt/git Give the git user access to the git folder where the repositories will live. Use with caution! This will overwrite group shared repositories if they already exist within the git repository. sudo chown -R git:git /opt/git Create a git repository and a project: mkdir -p /opt/git/project-name.git cd /opt/git/project-name.git git init --bare git init --bare --shared (if the repository will be shared by a group) If your repository is only going to be used by one user then you can just use the git user for simplicity. Change the owner of theprojectname.git to the git user and group. sudo chown -R git:git /opt/git/theprojectname.git sudo chmod o-rwx /opt/git/theprojectname.git (remove access to anyone else). If your repository will be used by multiple people, create a group for the Git repository. To create a group: sudo groupadd thegroupname or sudo addgroup thegroupname To add a user to the group: sudo usermod -a -G thegroupname theusername or sudo useradd -G thegroupname theusername To remove a user from a group (Remove the user billybob from the group hillbilly): gpasswd -d billybob hillbilly Make sure the group has access to the repository: sudo chgrp -R thegroupname thereponame.git (-R set the group ownership recursively). sudo chmod g+rws thereponame.git (set the sticky bit so changes are owned by the group). sudo chmod o-rwx thereponame.git (remove access for \"other\" so only group members can clone). On the client, create a repository: Configure the git username and email from the instructions above. Create a local git repo called project-name mkdir -p project-name Initialize the git repo git init Add some files and commit them: git add . git commit -m \"initial commit\" Link your local repository to the server. If you are using the git user (before pushing commits see generating SSH keys below): git remote add origin git@gitserver/opt/git/project-name.git If you are using your own username that is a member of the group that has access to theprojectname.git: git remote add origin ssh://username@servername/opt/git/theprojectname.git Push your files: git push origin master After the initial push you only need to type: git push Methods to push all branches: git push origin '*:*' git push origin --all git push REMOTE '*:*' git push REMOTE --all To automatically push all branches to their matching branch: git config --global push.default matching To only push the current branch to its matching branch: git config --global push.default simple If you are using the git user you will need to generate a public and private SSH key for authentication (unless you know the password for the git user). To generate the SSH keys: If there is no .ssh directory in your home directory you will have to create one. mkdir .ssh Change the permissions to 700. chmod -R 700 .ssh cd ~/.ssh ssh-keygen -t rsa -Accept the default name. -You can enter a password if you like. If you do not, you can take advantage of automatic authentication using your public SSH key (id_rsa.pub) amd private SSH key (id_rsa) pair. Add the contents of your public key to the git users authorized_keys file. Do not overwrite the git users authorized_keys file because anyone else using it will not be able to log in. Point repository to a different server and keep the history: If you want to change your repository to point to a different server and still keep the history. Pull everything from your soon-to-be-old-server into your local repository. Create the new repository on the new server. In your local repository update the URL path to the new server (git remote set-url origin ...). See above for example. \"git push origin master\" to the new location. The Git log should still show the history and all of your data will be on the new server. I installed GitExtensions on my Windows laptop and it would not push to a UNC path until I pointed it to GitHub Desktop. GitHub Desktop (Git Shell): C:\\Users\\rlholland\\AppData\\Local\\GitHub\\PortableGit_d7effa1a4a322478cd29c826b52a0c118ad3db11\\usr\\bin C:\\Users\\rlholland\\AppData\\Local\\GitHub\\GitHub.appref-ms --open-shell MINGW32 (Git Bash): C:\\Program Files\\Git\\usr\\bin \"C:\\Program Files\\Git\\git-bash.exe\" --cd-to-home Making Git auto-commit: I'd like to use git to record all the changes to a file. Is there a way I can turn git 'commit' on to automatically happen every time a file is updated - so there is a new commit for every change to a file? Ideally I'd like my users to not even know that git is running behind the scenes. A user could then potentially \"undo\" changes to a file - and this could be achieved by pulling a previous version out of git. On Linux you could use inotifywait to automatically execute a command every time a file's content is changed. Edit: the following command commits file.txt as soon as it is saved: inotifywait -q -m -e CLOSE_WRITE --format=\"git commit -m 'autocommit on change' %w\" file.txt | sh The earlier inotifywait answer is great, but it isn't quite a complete solution. As written, it is a one shot commit for a one time change in a file. It does not work for the common case where editing a file creates a new inode with the original name. inotifywait -m apparently follows files by inode, not by name. Also, after the file has changed, it is not staged for git commit without git add or git commit -a. Making some adjustments, here is what I am using on Debian to track all changes to my calendar file: /etc/rc.local: su -c /home/ username /bin/gitwait -l username /home/ username /bin/gitwait: #!/bin/bash # # gitwait - watch file and git commit all changes as they happen # while true; do inotifywait -qq -e CLOSE_WRITE ~/.calendar/calendar cd ~/.calendar; git commit -a -m 'autocommit on change' done This could be generalized to wait on a list of files and/or directories, and the corresponding inotifywait processes, and restart each inotifywait as a file is changed. Use the -r flag to inotifywait, but note that the kernel has a limit on the number of inotifywait watches it can set up. man inotifywait will tell you more. This Github repository was recommended: https://github.com/nevik/gitwatch.git. I have cloned it in my personal repository. Source: http://stackoverflow.com/questions/420143/making-git-auto-commit. The index.lock issue: I was getting an error when I made a commit. I can't remember what the error was but I had a choice to answer \"Y\" or \"N\" to retry. I selected \"N\" and then was taken back to the command prompt. I looked on StackOverflow.com and saw a post that someone had submitted about creating the .git/index.lock file and trying the commit again and if it didn't work. Delete the index.lock file which seemed to work for the person that made the post. I tried it and it worked for me. Index.lock issue cannot write to index: While the prompt is still showing \"Do you want to retry Y/N\", open another command prompt and go into the .git directory and copy the index.lock file to index.lock.bak. On Windows: type index.lock index.lock.bak On Linux: cat index.lock index.lock.bak Go back to the original command prompt and type \"N\" to not retry. Go back to the other command prompt and copy index.lock.bak into index. type index.lock.bak index cat index.lock.bak index del index.lock rm index.lock Type: git status log to see the changes. Websites: https://gist.github.com/hofmannsven/6814451 -- Someones Git notes I found on Github. Instaweb: Git local repository web server (GitWeb): If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight web server on your system like lighttpd or webrick. On Linux machines, lighttpd is often installed, so you may be able to get it to run by typing git instaweb in your project directory. If you\u2019re running a Mac, Leopard comes preinstalled with Ruby, so webrick may be your best bet. To start instaweb with a non-lighttpd handler, you can run it with the --httpd option. $ git instaweb --httpd=webrick [2009-02-21 10:02:21] INFO WEBrick 1.3.1 [2009-02-21 10:02:21] INFO ruby 1.8.6 (2008-03-03) [universal-darwin9.0] That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page. It\u2019s pretty easy on your part. When you\u2019re done and want to shut down the server, you can run the same command with the --stop option: $ git instaweb --httpd=webrick --stop Example: cd reponame git instaweb --httpd=apache2 git instaweb --httpd=apache2 --stop GitWeb source: https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb Transferring repositories. I transferred 3 repositories and for some reason, when I got the confirmation link in my email in Chrome, the transfer link didn't work. I had to open my email in Firefox and click on the confirmation link and the transfer worked.","title":"GiT"},{"location":"git/#configuring-git","text":"","title":"Configuring git:"},{"location":"git/#for-all-users-on-the-system","text":"git --config system","title":"For all users on the system:"},{"location":"git/#for-user-level","text":"git --config global","title":"For user level:"},{"location":"git/#set-username-and-email-address","text":"git config --global user.name \"Robert Holland\" git config --global user.email rob@example.com","title":"Set username and email address:"},{"location":"git/#set-the-colors-for-git","text":"git config --global color.ui auto git config --global color.ui true","title":"Set the colors for git:"},{"location":"git/#set-the-pager-for-git-diff","text":"git config --global core.pager 'less -R' The git config --global command is also used to create aliases.","title":"Set the pager for git diff:"},{"location":"git/#reset-author","text":"After updating my username and email address I had to reset the author by typing: git commit --amend --reset-author (can use this to reset the author for the latest commit)","title":"Reset author:"},{"location":"git/#view-git-configuration","text":"If you want to see what is already configured: git config --list","title":"View git configuration:"},{"location":"git/#view-git-username-and-email-address","text":"If you want to see the username or email address: git config user.name git config user.email","title":"View git username and email address:"},{"location":"git/#to-configure-the-preferred-editor","text":"git config --global core.editor \"EditorNameHere\" git config --global core.editor \"mate -wl1\" (wait for textmate to finish and put the cursor on line one). git config --system color.ui true","title":"To configure the preferred editor:"},{"location":"git/#exploring-git-auto-completion","text":"Download git-completion.bash and rename it to .git-completion.bash. Download it from here: curl -OL https://github.com/git/git/raw/master/contrib/completion/git-completion.bash Rename the file to .git-completion.bash (notice the leading dot (.): mv git-completion.bash .git-completion.bash Enter this in the .bash_profile or equivalent: #Git configuration file: if [ -f ~/.git-completion.bash ]; then source ~/.git-completion.bash fi Create a new repository on the command line make a new directory then type: touch README.md git init git add README.md git commit -m \"first commit\" git remote add origin https://github.com/username/reponame.git git push -u origin master //Only need to do this the first time you push to the server so that the upstream branch gets set.","title":"Exploring Git Auto-completion:"},{"location":"git/#push-an-existing-repository-from-the-command-line","text":"git remote add origin https://github.com/username/reponame.git git push -u origin master //Only need to do this the first time you push to the server so that the upstream branch gets set.","title":"Push an existing repository from the command line:"},{"location":"git/#git-checkout","text":"Undo changes to the git repository: I changed a file and saved it but I have not staged (git add) it yet. Git status shows what was changed and I want to undo my changes. To replace the file in the local directory with a copy of what you have in the working area type: git checkout -- filename This will replace the file that you changed with an original version before the change. If you only use git checkout filename (without the dashes), you may accidentally checkout a branch that has the same name as the file you are trying to restore (unlikely because branches don't have extensions). The double dashes -- tells git to stay in the current branch and look for the file you want to restore.","title":"Git checkout:"},{"location":"git/#branching","text":"If you want to make another version of your files just make a branch. To create a new branch type: git branch newbranchname Git will automatically copy the master repo into your new branch. Change into the new branch by typing: git checkout newbranchname git checkout -b newbranchname : Will create the new branch and change into it. You can make changes without disturbing the master files. If all goes well you can merge your changes into the master branch.","title":"Branching:"},{"location":"git/#track-a-branch","text":"If you have a branch that is not tracking you can add it to be tracked by typing: git config branch.branchname.remote origin or git config branch.branchname.merge refs/heads/master or git branch --set-upstream branchname origin/branchname (This works with version 1.7 and later). or git branch --set-upstream-to=origin/ branch master","title":"Track a branch"},{"location":"git/#merge-branch","text":"To merge your new branch into master, first go to the master branch by typing: git checkout master then type: git merge branchname The master branch will now have the same changes as branchname","title":"Merge branch:"},{"location":"git/#to-back-out-of-a-merge-conflict-type","text":"git merge --abort This will leave your changes alone and not do the merge.","title":"To back out of a merge conflict type:"},{"location":"git/#to-update-a-branch-with-the-latest-changes-from-master","text":"You have two options: The first is a merge, but this creates an extra commit for the merge. Checkout each branch: git checkout branch1 Then merge: git merge origin/master Then push: git push origin branch1 Alternatively, you can do a rebase (easier): git fetch git rebase origin/master","title":"To update a branch with the latest changes from master:"},{"location":"git/#if-you-want-to-change-or-revert-the-master-branch-to-the-previous-commit","text":"Checkout previous commit on master git checkout abc123... While in the abc123... detached branch, create branch for new master git checkout -b new_master Delete old master git branch -D master Make new_master master git branch -mv new_master master Alternatively you can reset current branch to one commit ago on master git reset --hard abc123... Then you will have to force push to the repository: git push --force origin master Try this if you get an error force pushing \"error: denying non-fast forward refs/heads/master (you should pull first)\" and you have access to the remote git server in ssh, you can go into the git remote directory and set: git config receive.denyNonFastforwards false If all fails or you don't have access to the remote repository, just make an update commit correcting the error. If you want to delete the branch (make sure you are on the master branch) type: git branch -D branchname","title":"If you want to change or revert the master branch to the previous commit:"},{"location":"git/#if-you-want-to-see-all-of-the-branches","text":"git branch -a git branch show-all -- Doesn't seem to show all branches unless you have checked them out at some point.","title":"If you want to see all of the branches:"},{"location":"git/#if-you-want-to-see-only-the-remote-branches","text":"git branch -r","title":"If you want to see only the remote branches:"},{"location":"git/#if-you-want-to-see-only-local-branches","text":"git branch","title":"If you want to see only local branches:"},{"location":"git/#if-you-want-to-see-the-branches-along-with-the-latest-commit-message","text":"git branch -v","title":"If you want to see the branches along with the latest commit message:"},{"location":"git/#how-to-find-out-if-one-branch-has-all-of-the-commits-of-another-branch","text":"git branch --merged (This will show a list of all of the branches that contain what is in your current branch. This will allow you to delete the other matching branches without causing any harm).","title":"How to find out if one branch has all of the commits of another branch."},{"location":"git/#git-diff","text":"To see all of the changes made to the files type: git diff You can see a line by line difference between what is in the repository or staging area compared to what is in the working area. If you just want to see what is in a single file type: git diff singlefilename If you have already staged a file and want to see the differences between that staged file and what you have in the repository then type: git diff --staged diff between two different commits in the same branch, you can put the SHA of the oldest commit first then the SHA of the latest commit last to see what is not in (or missing) from the first file. git diff d861a745:/path/to/filename.txt 118192cf:/path/to/filename.txt diff between two different commits in the same branch, you can put the SHA of the latest commit first then the SHA of the older commit last to see what was added to the file. git diff 118192cf:/path/to/filename.txt d861a745:/path/to/filename.txt","title":"Git diff"},{"location":"git/#word-wrap","text":"When you are in the diff view you can use the (minus sign + shift + S) to word wrap the long lines. Repeat the same key combination to undo the word wrap. Also you can see the changes side by side by typing: git diff --color-words filename","title":"Word Wrap"},{"location":"git/#git-blame","text":"To see all the changes line by line in a file and who made the change over time type: git blame -w filename The -w does not show differences in whitespace.","title":"Git blame:"},{"location":"git/#commits","text":"If you want to commit a file and add a message: commit --message=\"This is my message.\" \"filename.txt\" If you want to see a particular commit type: git show [SHA Key]","title":"Commits"},{"location":"git/#to-see-the-commits-for-only-one-file","text":"git log --follow filename","title":"To see the commits for only one file:"},{"location":"git/#undo-changes-in-the-staging-area","text":"I have made a change to a file and it shows up as changed in the working area. I used git add filename to add the file to the staging area. Now I want to take the file out of the staging area and put it back in the working area. git reset HEAD filename You will see an \"M\" next to the file that indicates that the staging area was modified. The -a option sends the commit directly to the repository skipping the staging area: git commit -am \"Message\" You cannot use the \"-am\" option when committing modified files individually. This is used in situations where you have multiple files that have been modified but you only want to commit some of them. The \"-a\" will have to be left out, only use \"-m\". Example: git commit -m \"Commit message\" \"File1.txt\" \"File2.txt\"","title":"Undo changes in the staging area:"},{"location":"git/#amending-commits","text":"You can only amend the last commit because it doesn't have any more commits after it. Once you have added another commit you can't amend a previous commit. If you need to change previous commit just make a new commit with the changes that you need. I have already committed a file and then I make another change to the file and add it to the staging area. I want to commit the additional change into the previous commit: git commit --amend -m \"Same message or different one.\"","title":"Amending Commits:"},{"location":"git/#add-a-sign-off-to-the-commit-type","text":"git commit -s -am \"Message\"","title":"Add a \"Sign-off\" to the commit type:"},{"location":"git/#to-use-gpgpgp-to-sign-a-commit-you-must-first-configure-git-with-your-gpgpgp-key-so-that-it-can-be-used","text":"git config user.signingkey HEX KEY ID or for global setting using the same key for every repository. git config --global user.signingkey HEX KEY ID","title":"To use GPG/PGP to sign a commit you must first configure Git with your GPG/PGP key so that it can be used."},{"location":"git/#to-gpgpgp-sign-a-commit-type","text":"git commit -S -am \"Message\" --(Uppercase S for GPG signed commits). Can use the same command to change the commit message. You can amend a commit that is previous to the most recent commit. You will have to use git to checkout the commit using the SHA hash and then re-commit it with the new changes. git checkout 2d2323d23423d -- filename This will put the file in the staging area and not the working area. When you checkout a file from the staging area it will go to the working area. (git diff --staged)","title":"To GPG/PGP sign a commit type:"},{"location":"git/#git-revert","text":"Undo the changes made by a commit. It will take all of the changes and add everything that was deleted and delete everything that was added. git revert SHA Git reset: Moves the HEAD pointer. Similar to making a recording on a tape then rewinding 10 seconds and recording again. Has 3 options. git reset --soft sha Does not change the staging index or working directory. Only the repository is set back to an earlier version. git reset --mixed sha (default) Changes the staging index to match the repository. Does not change the working directory. --mixed is almost as safe as --soft. git reset --hard sha changes staging index and working directory to match the repository. (Rewinding 10 seconds and pressing record.) It removes every change that was made before the commit that you select.","title":"Git Revert:"},{"location":"git/#git-clean","text":"Remove unwanted files from your git directory. git clean -n (does a dry run) git clean -f (permanently deletes the untracked files from your directory) (see cached option under git ignore below for how to remove files that have been previously tracked but you don't want to track them anymore.","title":"Git clean:"},{"location":"git/#git-ignore","text":"Create a file in the root directory called .gitignore and place files and extensions in .gitignore that you want git to ignore. Can use regular expressions: * ? [aeiou] [0-9] Negate expressions with ! Example: !index.php tells git to not ignore index.php. Ignore all files in a directory with a trailing slash. DirectoryName/DirectoryName/ Comment with #","title":"Git Ignore"},{"location":"git/#global-ignore","text":"Put all of your git ignore commands in one file and point git to it using: git config --global The file can be named anything you want. You just have to tell git where it is. git config --global core.excludesfile path/to/filename (Ex: .ignore_global) Ignore files that have been previously tracked but you don't want to track them anymore. You can use the git rm command to delete the file from your directory and git will automatically remove it from being tracked by the repository. If you want to keep the file but remove it from being tracked you can use: git rm --cached filename This removes the file from being tracked by git. If you do a git status it will show as \"deleted\" but it really isn't. It is just no longer being tracked. Git does not track empty directories. If you want to track a directory you will have to put a file in it. Most commonly people put a file named .gitkeep or placeholder.txt inside the directory so that git will watch the directory.","title":"Global Ignore"},{"location":"git/#comparing-branches","text":"git diff master..newbranch The branch listed second in your command is the \"b\" branch in the diff output. A different view for diff: git diff --color-words newbranch..master If you want to compare two branches but not the latest commit of one branch (the previous commit): git --color-words master..newbranch^ If you want to compare a file from the most recent commit on the master branch to the most recent commit on the 32a79a7 branch (the number 0 is the most recent commit of that branch, 1 would be the second most commit): git diff master~0 32a79a7~0 php/update_cal.php If you wanted to compare the same file between two different branches. *The branch listed second is the \"b\" branch in the diff output: git diff master newtest -- testing.txt","title":"Comparing Branches:"},{"location":"git/#rename-branches","text":"Switch to the branch that you want to rename. git branch -m oldbranchname newbranchname git branch --move oldbranchname newbranchname","title":"Rename branches:"},{"location":"git/#using-fast-forward-vs-true-merge","text":"Example: If you make a new branch from master and make changes to the new branch without making any changes to master, then merge the new changes into master, you are doing a fast forward merge. No new commit will need to be made because you are just adding more or to \"updating\" master. If you make a new branch and make changes to the new branch and also make changes to master and do a merge then you are doing a true merge and you will have a merge conflict and will need to specify the differences that you want to keep or discard. If you want to specify a merge tool to use when merging files you can do so by typing: git mergetool --tool=NameOfMergeTool","title":"Using fast-forward vs true merge:"},{"location":"git/#rebase","text":"Process Tracking (rebase) Process tracking is when you merge the master branch into your working branch to update your working branch with new stuff from the master branch. This helps you reduce the number of merge conflicts that occur when you finally have to merge your changes back into master.","title":"Rebase:"},{"location":"git/#stashstashing","text":"A stash is not a commit and they do not have a SHA associated with them. You use \"stash\" when you are in one branch then try to checkout another branch without first saving the changes for the branch you are in. You will get a message telling you that you will lose the changes that you have already made. You can save them by stashing them and then continue to checkout the other branch. To stash type: git stash save \"Message for stash.\" If you want to see a list of items in the stash type: git stash list You will see stash{0}, stash{1}, etc. It doesn't matter which branch you are on, you will still be able to see the stash and pull it out of the stash. This is helpful if you realize you are making changes to the wrong branch. Just stash the changes and checkout the branch you need to apply the changes to and apply the stash. If you want to see a particular stash, you will have to reference it by its number. For example: If I wanted to see what was in stash{0} I would type: git stash show stash@{0} To see the stash in a more detailed way (diff), you will have to use the \"Patch\" option. Type: git stash show -p stash@{0} To take the stash out of the stash repository you can use two commands: git stash pop git stash apply The difference is that git stash pop will remove the stash from the stash repository and git stash apply will leave a copy in the stash repository. Delete single items that are in the stash type: git stash drop 0 Delete all items in the stash by typing: git stash clear","title":"Stash/Stashing"},{"location":"git/#remote-branches","text":"If you want to see all of the branches on the remote type: git remote git remote -v (more verbose information) If you want to add a remote repository type: git remote add alias url Example: git remote add origin https://github.com/rlholland/reponame.git You don't have to use the name \"origin\" you can change it to anything you want. You can clone a repository that you don't own and make changes to it then push your changes to your own repository. Just use git remote add and create another path to your repository. Example: git remote add new-origin path-to-new-repository Now you can push-pull to the new-origin and also pull updates from the old origin that you don't own.","title":"Remote Branches:"},{"location":"git/#changeupdate-url","text":"If you want to change/update the URL in .git/config to point to a different repository: git remote set-url alias url Example: git remote set-url origin B:/Millennium/mPage/gitrepositories/azb_custom_components.git This method defaults to SSH. git remote set-url origin git@github.com:rlholland/remoterepositoryname.git This method specifically uses SSH. git remote add origin ssh://username@servername/path/to/repository.git If you want to remove a remote repository type: git remote rm remoterepositoryname Example: git remote rm origin If you want to look at the remote SHA you can type: cat .git/refs/remotes/origin/master This will show you the latest SHA on the remote","title":"Change/Update URL:"},{"location":"git/#clone","text":"If you want to clone a remote repository into a folder that you name type: git clone https://github.com/rlholland/reponame.git newlocalfoldername You can also clone a specific branch by using the -b option. Example: git clone -b branch remote_repo git clone -b thebranchname git@github.com:user/myproject.git If you want to clone using SSH: git clone ssh://username@servername/absolute/path/to/git/repo.git","title":"Clone:"},{"location":"git/#push","text":"If you want to push all changes: git push --all \"https://github.com/rlholland/reponame.git\"","title":"Push:"},{"location":"git/#log","text":"If you want to see the commits that were made to the git repo, type: git log This will show you all of the commits and the messages that were entered when the commit was made. If you want to limit the display of message to a certain number then type: git log -n 10 This will limit the number of messages displayed on the screen to 10. If you want to see all of the commits from the beginning up to a certain date type: git log --until=2014-05-25 If you want to see all of the commits since a certain date to the present type: git log --since=2014-05-25 You can use both commands together to see commits between two dates. git log --since=\"two weeks ago\" --until=\"3 days ago\" git log --since=\"two.weeks\" --until=\"3.days\" You can see commits made by a specific person (author) by typing: git log --author=\"Robert\" (can use quotes if search term has a space). You can search the commit messages for an expression by using grep (Global Regular Expression). Type: git log --grep=\"Text you are looking for\" (this is case sensitive). You can ignore case with: git log --grep=\"Text you are looking for\" -i (the dash \"i\" will ignore case). You can show the log file by SHA: git log SHA1..SHA2 Example: git log 23fadf323..938533arad --oneline The --oneline shows part of the SHA and the commit on one line. git log --format=oneline shows the complete SHA and message on one line. You can show the log on just one file from a certain point and view the changes. git log -p SHA.. index.html git log -p --since=\"2014-04-01\" index.html (The -p shows the differences) To see the status or summary of the commits you can use: git log --stat git log --summary git log --stat --summary Git can search diffs with the -S option (it's called pickaxe in the docs) http://stackoverflow.com/questions/4468361/search-all-of-git-history-for-a-string","title":"Log:"},{"location":"git/#search","text":"It's also possible to search for commits that introduce or remove a particular line of source code. This is called a pickaxe, and it takes the form of -S\" \". For example, if you want to know when the string Hello, World! was added to any file in the project, you would use the following command: git log -S\"Hello, World!\" Find any commit that added or removed the string password. git log -Spassword","title":"Search:"},{"location":"git/#patch","text":"git log -p will show the diffs. If you provide a file (-p file), it will generate a patch for you. git log -G looks for differences whose added or removed line matches the given regexp, as opposed to -S, which \"looks for differences that introduce or remove an instance of string\". git log --all searches over all branches and tags; alternatively, use --branches[= pattern ] or --tags[= pattern ] If you want to search using a regular expression instead of a string, you can use the -G\" \" flag instead. This is a very powerful debugging tool, as it lets you locate all of the commits that affect a particular line of code. It can even show you when a line was copied or moved to another file. To see a GPG signature: git log --show-signature A good Git log command to show a lot of detail is: git log --graph --oneline --decorate --all If you want to see the log for a specific branch type: git log specificbranch --oneline -3 (the -3 shows the latest 3 logs) If you want to see the log differences in patch mode type: git log -p branchname..origin/branchname If you only want to see the log entries for particurlar files type: git log -- foo.txt bar.txt","title":"Patch:"},{"location":"git/#git-fetch","text":"This synchronizes any remote branches we don't have locally so when you type git branch it will show you all of the branches. If you want to fetch type: git fetch origin If you are tracking you don't need to type the \"origin\" just type: git fetch Three basic guidelines: Always fetch before you work. Fetch before you push Fetch often You can also use \"git pull\" Git Pull git pull does the same thing as git fetch except it automatically does the merge. git pull = git fetch + git merge Checkout Remote Branches These commands will checkout the branch and track them: git branch newbranchname HEAD git branch newbranchname anycommitSHA git branch newbranchname origin/branchname To delete a remote branch use a colon: git push origin :branchname A little information history on the git push command. It used to be done like this: git push origin branchname:branchname. The colon between them means that you are telling git to push to origin the local branchname to the remote branchname. If you don't specify the colon and you only have one branchname, git assumes they are the same. So the git push origin :branchname means to push to origin nothing locally to the remote branchname. The remote branchname is now getting nothing pushed to it and is deleted. The new way to delete a branch is: git push origin --delete branchname If you want to modify someones elses code that you find on GitHub, you will have to \"Fork\" it then make your changes. Once you are done with your changes, you can create a \"Pull Request\" so that the original owner can look at your code and decide to incorporate it into theirs. Configure the prompt to show the git branch when in a git repo: Edit the .bashrc file and enter below BEGIN: # Git specific environment and startup programs if [ -f ~/.git-prompt.sh ]; then source ~/.git-prompt.sh fi #Git Prompt PS1=\"[\\u:\\w]\\$(__git_ps1)$ \" # -- On Fedora Linux export PS1='\\W$(__git_ps1 \"(%s)\") ' # -- On Mac OSX END: If the shell does not load the .git_prompt.sh file you may see the following error on the command line. __git_ps1: command not found If you want to see the current prompt string \"PS1\" settings type \"echo $PS1\"","title":"Git Fetch"},{"location":"git/#configuring-git-aliases","text":"You can create aliases for Git in the .gitconfig file two ways. You can edit the file directly or you can use the git config --global command. For example: I didn't want to type the entire log line below so I created a shortcut for it in the .gitconfig file by using the git config --global command. git log --graph --oneline --decorate --all I created an alias for it named \"logg\" by typing: git config --global alias.logg \"log --graph --oneline --decorate --all\" Now I only have to enter \"git logg\" to get the same output. Re-install Git icons on Windows github --reinstall-shortcuts Here are some more common Git aliases: git config --global alias.co checkout git config --global alias.cm commit git config --global alias.br branch git config --global alias.dfs \"diff --staged\" git config --global alias.logg \"log --graph --oneline --decorate --all\"","title":"Configuring Git Aliases"},{"location":"git/#setup-two-factor-authentication","text":"Git credentials: Immediately stop the credential manager on a Mac if you have your password stored/cached for a specific amount of time. git credential-cache exit","title":"Setup Two-Factor Authentication:"},{"location":"git/#on-a-mac","text":"To remove your credentials from the OSX Keychain and configure for two-factor authentication, type the following at the command prompt: git credential-osxkeychain erase protocol=https host=github.com (press enter twice to finish) You now need to get a personal access token from Github. Log into Github and select \"Security\" and enable two-factor authentication. Click on \"Developer settings\" then \"Personal Access Token\" and click the \"Generate New Token\" button. If you use more than one computer, it is a good idea to include the name of your computer in the name of the token so that you can revoke it if necessary. Copy the token and paste it in when you are prompted for your password during a commit.","title":"On a MAC:"},{"location":"git/#on-windows","text":"You have to install Github Desktop which has the two-factor authentication built in (just sign in with your Github.com account and that should get two-factor setup for the GUI part. If you want to use the same two-factor from the command line, you will have to install \"Git for Windows (https://git-scm.com/download/win)\". Once that is installed, go to Github desktop and click the \"Repository\" dropdown and depending on which shell you have configured under \"Options\" -- \"Advanced\", either select \"Open Git Command Prompt\", \"Open Git Powershell\", or \"Open Git in Bash\". (If you try to push without the correct configuration in the .gitconfig file, you may see a message similar to the one below: fatal: unable to access 'https://github.com/rlholland/gitnotes.git/': SSL certificate problem: unable to get local issuer certificate) Once you have your favorite command prompt open, edit the .gitconfig file (located in the root of your profile directory and/or in your home folder if you are on a network with an automatically mapped home directory) and enter the following so that you can push from the command line using two-factor authentication. [http] sslcainfo=C:/Program Files/Git/mingw64/ssl/certs/ca-bundle.crt sslbackend=schannel (Check for the correct path to ca-bundle.crt if you are using 32bit Windows). After the .gitconfig file has been modified and saved, do a push from your repository and you should not get prompted for a password. Your two-factor authentication is setup for your computer. If you lose your computer or misplace it, you can always log into Github and revoke your Personal Access Token for that computer.","title":"On Windows:"},{"location":"git/#merging-git-repositories","text":"http://blog.caplin.com/2013/09/18/merging-two-git-repositories/","title":"Merging Git Repositories:"},{"location":"git/#list-of-gui-interfaces-for-git-can-be-found-on-the-git-wiki","text":"https://git.wiki.kernel.org/index.php/InterfacesFrontendsAndTools","title":"List of Gui Interfaces for Git can be found on the Git Wiki:"},{"location":"git/#git-hosting","text":"There are two ways to host, Use a hosting company or host yourself.","title":"Git Hosting"},{"location":"git/#popular-git-hosting-companies-are","text":"http://github.com http://bitbucket.org http://gitorious.org","title":"Popular Git hosting companies are:"},{"location":"git/#self-hosting","text":"Gitosis - http://github.com/tv42/gitosis (development for this stopped a few years ago) Gitolite - http://github.com/sitaramc/gitolite","title":"Self-Hosting:"},{"location":"git/#git-tutorials","text":"Michael's Git Tutorial - Setting Up a Git Server https://www.youtube.com/watch?v=SyMkLQLC3Kg How to Setup a Git SSH Server and Client on Ubuntu https://www.youtube.com/watch?v=lXSZUuDW4nY Creating a Git Server on a Windows OS https://www.youtube.com/watch?v=w3eRlEhzAZk ebc=ANyPxKpNRpbhQZ_nlL7IxaYeM_5rOLOI2RPJi2kv1jJuw6DUEEe14nsBvDRHvBjQKmO7DIvaOUzprWUCtFUXdcO9X-cLOpYrHg Pushing to GitHub with HTTPS and 2-Factor authentication https://www.youtube.com/watch?v=hJLaXNMz8zw http://www.linux-magazine.com/Online/Features/Install-Your-Own-Git-Server http://studyhat.blogspot.com/2010/10/install-your-own-git-server-on-cent-os.html http://fedoracoreproject.blogspot.com/2010/02/how-to-install-vnc-server-on-fedora.html GitHub Instructions - http://git-scm.com/book/en/v2/Git-on-the-Server-The-Protocols GitHub Instructions - http://git-scm.com/book/ch4-7.html Installing on AIX, HP-UX, Solaris - http://blog.boreas.ro/2008/03/porting-git-to-hp-ux-pa-risc-and-aix.html","title":"Git Tutorials"},{"location":"git/#ubuntu-server-configuration","text":"To find the Gateway: route -n On the server: sudo vi /etc/network/interfaces (Set the eth0 interface to a static IP address) auto lo iface lo inet loopback auto eth0 iface eth0 inet static address 192.168.1.2 netmask 255.255.255.0 gateway 192.168.1.1 From the client: sudo vi /etc/hosts (enter the Git Server's information) sudo vi /etc/ssh/sshd_config (Configure SSH to accept access by SHA key instead of tunnelled clear text passwords) #Find the line that says: PasswordAuthentication yes #and change it to read: PasswordAuthentication no #uncomment the line. sudo restart ssh If you want to use the Git user: sudo adduser git su - git mkdir .ssh chmod 700 .ssh touch .ssh/authorized_keys chmod 600 .ssh/authorized_keys (Make sure only the owner has access rights) Create an RSA key on the client and copy it to the server. ssh-keygen -t rsa ssh-keygen -t rsa -b 4096 (See below to copy the public key to the git user authorized_keys file on the server.) This method will allow ssh://git@servername/path/to/repo.git to be used for push pull operations. Another method using openssl: openssl genrsa -out id_rsa 4096 openssl rsa -in id_rsa -pubout id_rsa.pub Send your \"public\" key to the server: cat ~/.ssh/id_rsa.pub | ssh user@remote-server \"mkdir -p ~/.ssh cat ~/.ssh/authorized_keys\" Install Git on the server (if it isn't installed already): sudo apt-get -y install git Find out what shells are currently in use: cat /etc/shells Find out which shell git is using: From the git user login type: which git-shell Add the information from 'which git-shell' command to the list of valid shells in the /etc/shells file. Example /etc/shells file content: /bin/sh /bin/bash /bin/rbash /bin/dash /usr/bin/git-shell On Fedora 24 and 25, the chsh command is used to change the shell. It may not exist by default. Install the package that contains chsh: dnf install util-linux-user Change the git user login shell to git-shell: sudo chsh git Enter: /usr/bin/git-shell If you try to log into the git user from the command line after the git shell is enabled, you will see a message similar to this: fatal: Interactive git shell is not enabled. hint: ~/git-shell-commands should exist and have read and execute access.","title":"Ubuntu Server Configuration:"},{"location":"git/#on-the-server-create-a-git-repository","text":"mkdir -p /opt/git Give the git user access to the git folder where the repositories will live. Use with caution! This will overwrite group shared repositories if they already exist within the git repository. sudo chown -R git:git /opt/git Create a git repository and a project: mkdir -p /opt/git/project-name.git cd /opt/git/project-name.git git init --bare git init --bare --shared (if the repository will be shared by a group) If your repository is only going to be used by one user then you can just use the git user for simplicity. Change the owner of theprojectname.git to the git user and group. sudo chown -R git:git /opt/git/theprojectname.git sudo chmod o-rwx /opt/git/theprojectname.git (remove access to anyone else). If your repository will be used by multiple people, create a group for the Git repository. To create a group: sudo groupadd thegroupname or sudo addgroup thegroupname To add a user to the group: sudo usermod -a -G thegroupname theusername or sudo useradd -G thegroupname theusername To remove a user from a group (Remove the user billybob from the group hillbilly): gpasswd -d billybob hillbilly Make sure the group has access to the repository: sudo chgrp -R thegroupname thereponame.git (-R set the group ownership recursively). sudo chmod g+rws thereponame.git (set the sticky bit so changes are owned by the group). sudo chmod o-rwx thereponame.git (remove access for \"other\" so only group members can clone).","title":"On the Server, create a git repository:"},{"location":"git/#on-the-client-create-a-repository","text":"Configure the git username and email from the instructions above. Create a local git repo called project-name mkdir -p project-name Initialize the git repo git init Add some files and commit them: git add . git commit -m \"initial commit\" Link your local repository to the server. If you are using the git user (before pushing commits see generating SSH keys below): git remote add origin git@gitserver/opt/git/project-name.git If you are using your own username that is a member of the group that has access to theprojectname.git: git remote add origin ssh://username@servername/opt/git/theprojectname.git","title":"On the client, create a repository:"},{"location":"git/#push-your-files","text":"git push origin master After the initial push you only need to type: git push","title":"Push your files:"},{"location":"git/#methods-to-push-all-branches","text":"git push origin '*:*' git push origin --all git push REMOTE '*:*' git push REMOTE --all","title":"Methods to push all branches:"},{"location":"git/#to-automatically-push-all-branches-to-their-matching-branch","text":"git config --global push.default matching","title":"To automatically push all branches to their matching branch:"},{"location":"git/#to-only-push-the-current-branch-to-its-matching-branch","text":"git config --global push.default simple If you are using the git user you will need to generate a public and private SSH key for authentication (unless you know the password for the git user).","title":"To only push the current branch to its matching branch:"},{"location":"git/#to-generate-the-ssh-keys","text":"If there is no .ssh directory in your home directory you will have to create one. mkdir .ssh","title":"To generate the SSH keys:"},{"location":"git/#change-the-permissions-to-700","text":"chmod -R 700 .ssh cd ~/.ssh ssh-keygen -t rsa -Accept the default name. -You can enter a password if you like. If you do not, you can take advantage of automatic authentication using your public SSH key (id_rsa.pub) amd private SSH key (id_rsa) pair. Add the contents of your public key to the git users authorized_keys file. Do not overwrite the git users authorized_keys file because anyone else using it will not be able to log in.","title":"Change the permissions to 700."},{"location":"git/#point-repository-to-a-different-server-and-keep-the-history","text":"If you want to change your repository to point to a different server and still keep the history. Pull everything from your soon-to-be-old-server into your local repository. Create the new repository on the new server. In your local repository update the URL path to the new server (git remote set-url origin ...). See above for example. \"git push origin master\" to the new location. The Git log should still show the history and all of your data will be on the new server. I installed GitExtensions on my Windows laptop and it would not push to a UNC path until I pointed it to GitHub Desktop.","title":"Point repository to a different server and keep the history:"},{"location":"git/#github-desktop-git-shell","text":"C:\\Users\\rlholland\\AppData\\Local\\GitHub\\PortableGit_d7effa1a4a322478cd29c826b52a0c118ad3db11\\usr\\bin C:\\Users\\rlholland\\AppData\\Local\\GitHub\\GitHub.appref-ms --open-shell","title":"GitHub Desktop (Git Shell):"},{"location":"git/#mingw32-git-bash","text":"C:\\Program Files\\Git\\usr\\bin \"C:\\Program Files\\Git\\git-bash.exe\" --cd-to-home","title":"MINGW32 (Git Bash):"},{"location":"git/#making-git-auto-commit","text":"I'd like to use git to record all the changes to a file. Is there a way I can turn git 'commit' on to automatically happen every time a file is updated - so there is a new commit for every change to a file? Ideally I'd like my users to not even know that git is running behind the scenes. A user could then potentially \"undo\" changes to a file - and this could be achieved by pulling a previous version out of git. On Linux you could use inotifywait to automatically execute a command every time a file's content is changed. Edit: the following command commits file.txt as soon as it is saved: inotifywait -q -m -e CLOSE_WRITE --format=\"git commit -m 'autocommit on change' %w\" file.txt | sh The earlier inotifywait answer is great, but it isn't quite a complete solution. As written, it is a one shot commit for a one time change in a file. It does not work for the common case where editing a file creates a new inode with the original name. inotifywait -m apparently follows files by inode, not by name. Also, after the file has changed, it is not staged for git commit without git add or git commit -a. Making some adjustments, here is what I am using on Debian to track all changes to my calendar file: /etc/rc.local: su -c /home/ username /bin/gitwait -l username /home/ username /bin/gitwait: #!/bin/bash # # gitwait - watch file and git commit all changes as they happen # while true; do inotifywait -qq -e CLOSE_WRITE ~/.calendar/calendar cd ~/.calendar; git commit -a -m 'autocommit on change' done This could be generalized to wait on a list of files and/or directories, and the corresponding inotifywait processes, and restart each inotifywait as a file is changed. Use the -r flag to inotifywait, but note that the kernel has a limit on the number of inotifywait watches it can set up. man inotifywait will tell you more. This Github repository was recommended: https://github.com/nevik/gitwatch.git. I have cloned it in my personal repository. Source: http://stackoverflow.com/questions/420143/making-git-auto-commit.","title":"Making Git auto-commit:"},{"location":"git/#the-indexlock-issue","text":"I was getting an error when I made a commit. I can't remember what the error was but I had a choice to answer \"Y\" or \"N\" to retry. I selected \"N\" and then was taken back to the command prompt. I looked on StackOverflow.com and saw a post that someone had submitted about creating the .git/index.lock file and trying the commit again and if it didn't work. Delete the index.lock file which seemed to work for the person that made the post. I tried it and it worked for me. Index.lock issue cannot write to index: While the prompt is still showing \"Do you want to retry Y/N\", open another command prompt and go into the .git directory and copy the index.lock file to index.lock.bak. On Windows: type index.lock index.lock.bak On Linux: cat index.lock index.lock.bak Go back to the original command prompt and type \"N\" to not retry. Go back to the other command prompt and copy index.lock.bak into index. type index.lock.bak index cat index.lock.bak index del index.lock rm index.lock Type: git status log to see the changes. Websites: https://gist.github.com/hofmannsven/6814451 -- Someones Git notes I found on Github.","title":"The index.lock issue:"},{"location":"git/#instaweb","text":"Git local repository web server (GitWeb): If you want to check out what GitWeb would look like for your project, Git comes with a command to fire up a temporary instance if you have a lightweight web server on your system like lighttpd or webrick. On Linux machines, lighttpd is often installed, so you may be able to get it to run by typing git instaweb in your project directory. If you\u2019re running a Mac, Leopard comes preinstalled with Ruby, so webrick may be your best bet. To start instaweb with a non-lighttpd handler, you can run it with the --httpd option. $ git instaweb --httpd=webrick [2009-02-21 10:02:21] INFO WEBrick 1.3.1 [2009-02-21 10:02:21] INFO ruby 1.8.6 (2008-03-03) [universal-darwin9.0] That starts up an HTTPD server on port 1234 and then automatically starts a web browser that opens on that page. It\u2019s pretty easy on your part. When you\u2019re done and want to shut down the server, you can run the same command with the --stop option: $ git instaweb --httpd=webrick --stop Example: cd reponame git instaweb --httpd=apache2 git instaweb --httpd=apache2 --stop GitWeb source: https://git-scm.com/book/en/v2/Git-on-the-Server-GitWeb Transferring repositories. I transferred 3 repositories and for some reason, when I got the confirmation link in my email in Chrome, the transfer link didn't work. I had to open my email in Firefox and click on the confirmation link and the transfer worked.","title":"Instaweb:"},{"location":"keira/","text":"Introduction: Hello, Keira is Robert Holland's awesome and amazing daughter, she helped fix this website! Yay Keira! Keira is a student at North Ranch Elementary School and is very smart and in the gifted program. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Hobbies Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae. Projects Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae. Favorite Foods Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae. Favorite Snacks Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.","title":"Keira"},{"location":"keira/#introduction","text":"Hello, Keira is Robert Holland's awesome and amazing daughter, she helped fix this website! Yay Keira! Keira is a student at North Ranch Elementary School and is very smart and in the gifted program. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum.","title":"Introduction:"},{"location":"keira/#hobbies","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.","title":"Hobbies"},{"location":"keira/#projects","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.","title":"Projects"},{"location":"keira/#favorite-foods","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.","title":"Favorite Foods"},{"location":"keira/#favorite-snacks","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.Lorem ipsum dolor sit amet, consectetur adipiscing elit. In lacinia velit sed odio consequat, sed tristique turpis volutpat. Donec ligula sem, vestibulum eu condimentum at, porta et mauris. Mauris in sapien luctus, pretium purus eget, congue tortor. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Aliquam sed sem at mauris semper lobortis nec vitae velit. Donec dictum ligula ut eros laoreet, ut efficitur risus suscipit. Quisque sagittis accumsan metus, aliquam elementum turpis sollicitudin id. Cras rhoncus commodo imperdiet. Phasellus posuere commodo dolor nec bibendum. Etiam sollicitudin, ligula quis finibus interdum, sem nisl rutrum nisl, et venenatis ipsum purus sit amet enim. Curabitur tempor ante quis tempor sollicitudin. In hac habitasse platea dictumst. Aliquam erat volutpat. Aliquam non efficitur sapien. Vestibulum laoreet nisl a tellus euismod, ut rutrum neque tristique. Morbi venenatis in nisi at hendrerit. Nullam cursus vulputate magna, et lobortis quam eleifend eget. Sed hendrerit augue mauris, sed malesuada mauris consectetur vitae. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Donec posuere odio sapien, sed imperdiet odio bibendum sit amet. Mauris a dui non est facilisis volutpat non et nulla. Suspendisse molestie, nulla ac elementum luctus, velit erat finibus risus, quis placerat est turpis eu nibh. Aliquam sem ipsum, pharetra sed ornare a, pellentesque ac sapien. Curabitur eu lacinia nibh, auctor egestas lectus. Morbi rhoncus consequat ante. Ut a nunc sodales, imperdiet lacus quis, tristique massa. Sed et mattis arcu. Morbi at auctor lorem. Duis at egestas tellus, sed aliquam nibh. Integer convallis ligula urna, eu hendrerit diam auctor sed. Sed tincidunt rutrum fermentum. Aliquam feugiat sapien vitae velit porta, nec placerat velit sagittis. Ut placerat, nunc vel imperdiet pharetra, quam magna eleifend diam, congue fringilla risus augue ut massa. Nullam ante metus, pretium et ligula non, congue cursus dolor. Quisque eget feugiat augue, vitae fermentum dui. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus suscipit, felis vitae pretium lobortis, turpis magna rhoncus turpis, vel feugiat metus sapien sed massa. In ac fringilla ipsum. Duis condimentum tincidunt mi quis tristique. Nunc at tortor ac ligula interdum ornare. Nunc risus dui, congue ut enim et, porttitor vestibulum nibh. Suspendisse potenti. Fusce non enim bibendum, lobortis nunc eu, sodales mauris. Ut nisl augue, faucibus nec pellentesque quis, convallis eu nunc. Ut vel viverra justo, at ornare dolor. Donec ultricies rhoncus nisl, sed rutrum neque interdum aliquet. Duis quis cursus nisi, sit amet semper ante. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Fusce molestie posuere nisl eget dignissim. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras malesuada facilisis sodales. Aliquam dapibus pharetra elit. Pellentesque urna orci, interdum lobortis feugiat in, blandit quis diam. Morbi quis pulvinar tortor, nec fringilla felis. Aenean pretium, tellus nec egestas facilisis, nibh odio cursus orci, et cursus est magna id sem. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia Curae; Mauris vel libero vitae lectus gravida elementum. Nam sollicitudin tellus sem, ut pellentesque diam congue non. Duis elementum in nisi egestas elementum. Integer dignissim tempus blandit. Proin pharetra, urna vitae volutpat vehicula, enim ante auctor massa, nec ornare enim mauris sed nisi. Vestibulum rhoncus ultrices justo, ut eleifend libero sollicitudin id. Nunc auctor, leo ac sagittis eleifend, felis erat venenatis velit, nec consectetur elit ex nec felis. Sed ultricies eleifend orci. Vestibulum tincidunt lectus ut lacinia posuere. Donec pulvinar odio id nisl bibendum egestas. Mauris sed nulla gravida, dapibus dolor nec, cursus lacus. Fusce blandit neque et ipsum venenatis, at congue tortor dapibus. Integer pharetra dolor et nibh pellentesque semper. Nam ut ex sed libero auctor venenatis eu nec mi. Vivamus vitae est dictum, scelerisque erat sit amet, vehicula erat. Donec ullamcorper ligula a risus faucibus sagittis. Maecenas placerat eget sem eu rutrum. Duis scelerisque molestie enim eu egestas. Phasellus eget elit tincidunt, eleifend sapien eget, fermentum quam. Vivamus porta neque ut sapien commodo, vulputate accumsan purus gravida. Nulla vitae condimentum velit. Donec velit enim, malesuada sit amet urna non, tempus egestas elit. Aenean blandit finibus justo quis congue. Nulla mattis risus nec odio interdum tempor. Maecenas gravida, orci sed accumsan vestibulum, dolor lorem eleifend mi, in volutpat eros nunc eu quam. Quisque fermentum elit libero, sit amet convallis elit aliquet eget. Curabitur in mauris ut nisi hendrerit iaculis at ac erat. Cras turpis metus, rhoncus in magna in, porta dignissim arcu. Sed in nulla vel mi egestas consequat. Suspendisse eu mi posuere, gravida purus eget, tristique ligula. Nam lorem nulla, molestie non felis at, bibendum convallis turpis. Nunc vulputate malesuada lacus vitae varius. Ut ullamcorper sapien sed eros congue, vitae tempor arcu bibendum. Fusce nec porta nibh. Maecenas non aliquet odio. Pellentesque a vehicula mauris. Nam lobortis nisl ac nisi auctor, quis imperdiet libero pulvinar. Sed vestibulum blandit velit at hendrerit. Integer ultrices lectus enim, a finibus diam vulputate et. Maecenas viverra purus ac tincidunt iaculis. Aliquam aliquet tempus turpis, sed lobortis enim ullamcorper id. Aliquam eu dolor eu massa finibus convallis. Quisque ut efficitur urna, non congue nibh. Vestibulum vitae lorem at dolor vehicula cursus. Sed feugiat orci mattis sollicitudin rutrum. Nam et metus vitae felis lobortis mattis in eu elit. Fusce non luctus enim. Suspendisse lobortis neque eu auctor luctus. Donec tincidunt neque in lacus hendrerit, aliquam suscipit dolor accumsan. Maecenas tempor, urna et efficitur porttitor, tellus enim fermentum urna, vel cursus massa tortor eu libero. Aenean ac turpis lacinia, sagittis mi et, vehicula odio. Curabitur vulputate leo eleifend accumsan porttitor. Aenean ut libero pellentesque, tincidunt leo non, tempus ex. Sed dapibus, sapien et tristique hendrerit, nisl urna hendrerit dui, non pellentesque lorem justo non enim. Nunc non gravida ex, eget porttitor massa. Proin convallis tortor sit amet mattis semper. Nam tempus nunc mauris, non finibus odio elementum et. Quisque ullamcorper sagittis erat eget placerat. Ut faucibus tellus metus, nec ultrices est rutrum vitae.","title":"Favorite Snacks"},{"location":"pgp/","text":"The GNU Privacy Handbook - https://www.gnupg.org/gph/en/manual/book1.html Archlinux Wiki GnuPG - https://wiki.archlinux.org/index.php/GnuPG GnuPG Website - https://www.gnupg.org Youtube Videos: GnuPG Part One https://www.youtube.com/watch?v=IF-MchgZ2Os GnuPG Part Two https://www.youtube.com/watch?v=R-Dw7UXH00c GnuPG Part Three https://www.youtube.com/watch?v=JOBJPwyByyI NITC-GnuPG Part 3 https://www.youtube.com/watch?v=xAGfWyNgi2Q Generate/Create GPG/PGP Key: gpg2 --full-gen-key gpg --gen-key Send key to default key server: gpg --send-key KEYNAME You can upload your key to this PGP site: https://keyserver.pgp.com You can check if your key is on the PGP website here: https://keyserver.pgp.com To send your public key to a keyserver: gpg --keyserver the.keyserver.name.com --send-keys YOURKEYID Example: gpg --keyserver keyserver.ubuntu.com --send-keys 5DD98B3E Example: gpg --keyserver hkp://pgp.mit.edu --send-keys YOURKEYID Example: gpg --keyserver hkps.pool.sks-keyservers.net --send-keys YOURKEYID To receive a public key from a keyserver: gpg --keyserver the.keyserver.name.com --recv-keys THEKEYID Example: gpg --keyserver keyserver.ubuntu.com --recv-keys 5DD98B3E Export ascii armored key: gpg --export --armor jqdoe@example.com jqdoe-pubkey.asc gpg --export-secret-keys --armor jqdoe@example.com jqdoe-privkey.asc Use a double greater than symbol to export both public and private to the same file \" \". Encrypt a message to standard output: gpg -ea Enter your recipients and end with an empty line. Type your message that you want to encrypt. Press Control+D and your encrypted message will appear onscreen. If you want to encrypt the above message to a file you can type: gpg -ea filename.txt then do the steps above. Enter your recipients and end with an empty line. Type your message that you want to encrypt. Press Control+D and your encrypted message will be sent to filename.txt. Encrypt a single file (creates a binary file). This option may be combined with --sign. gpg -e filename or gpg --encrypt filename Encrypt a single file (creates an ASCII file). This option may be combined with --sign. gpg -a -e filename or gpg --armor --encrypt filename or gpg -ea filename This is a special version of the --encrypt command. The command expects the files to be encrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick encryption of multiple files. Encrypt multiple files. This option may be combined with --sign. gpg --encrypt-files file1 file2 file3 Encrypt with symmetric cipher only. This command asks for a passphrase. (May also be combined with --sign -- see GnuPG 1.0.7 released.) gpg -c filename or gpg --symmetric filename Encrypt to a recipient. gpg -e -r recipient filename or gpg --encrypt -r recipient filename or encrypt and sign. gpg -e -r recipient -s filename Use -u to specify the secret key to be used, and -r to specify the public key of the recipient. **Note: This doesn't seem to work when you have a default sender and recipient key established in gpg.conf. gpg -e -u \"Sender User Name\" -r \"Receiver User Name\" somefile Example 1: gpg -e -u \"me@example.com\" -r \"you@example.com\" -r \"them@example.com\" somefile Example 2: gpg -e -u \"Billy Bob\" -r \"Nancy Bob\" mydata.tar Example 3: gpg -s --default-key ABCD1234 -ea yyy.txt Password encrypt and sign a file: gpg -c -s filename Password encrypt and sign a message that can be decrypted by passphrase or secret key: gpg -c --sign --encrypt filename or gpg -c -s -e filename UUEncode a file before ascii encrypting: uuencode filename filename filename.uue gpg -a -e filename.uue UUEncode a file before normal encrypting: uuencode filename filename filename.uue gpg --encrypt filename.uue Decrypt UUEncoded file with normal encryption then UUDecode it: gpg --decrypt filename filename.uue uudecode filename.uue Decrypt a message in standard out (stout) type: gpg You will see a message similar to this: gpg: Go ahead and type your message ... At this point you can paste in the encrypted text and you will be prompted for your passphrase. Once you enter your passphrase, press Control+D to see the decrypted message. Decrypt file (or stdin if no file is specified) and write it to stdout (or the file specified with --output). If the decrypted file is signed, the signature is also verified. This command differs from the default operation, as it never writes to the filename which is included in the file and it rejects files which don't begin with an encrypted message. gpg --decrypt filenames Decrypt a file that has been binary or ascii encrypted and output the decrypted content to a file: gpg --output decrypted.txt --decrypt encrypted.txt.gpg or gpg -o decrypted.txt -d encrypted.txt.gpg This is a special version of the --decrypt command. The command expects the files to be decrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick decryption of multiple files. gpg --decrypt-files file1 file2 file3 Multiple Private Keys. When encrypting or decrypting it is possible to have more than one private key in use. To use a different private key other than the default use the option -u UID or use the option --local-user UID. This causes the default key used to be replaced by the wanted key. gpg -u KEY ID -r recipient --armor --sign --encrypt filename or gpg -u KEY ID -r recipient -a -s -e filename or (this should prompt you for recipients) gpg -u nameofprivatekey -a -s -e filename Signing / Verifying: Make a signature. This command may be combined with --encrypt. (May also be combined with --symmetric (see GnuPG 1.0.7 released.) gpg -s filename or gpg --sign filename Both -s and --sign make an illegible signature that you can't read. This is OK because GPG/PGP can still read it (not humans). Make a clear text signature. gpg --clearsign filename Make a detached signature. gpg -b filename or gpg --detach-sign filename Verify a signature file without generating any output. With no arguments, the signature packet is read from stdin. If only a sigfile is given, it may be a complete signature or a detached signature, in which case the signed stuff is expected in a file without the \".sig\" or \".asc\" extension. With more than 1 argument, the first should be a detached signature and the remaining files are the signed stuff. To read the signed stuff from stdin, use - as the second filename. For security reasons a detached signature cannot read the signed material from stdin without denoting it in the above way. gpg --verify sigfile signed_files This is a special version of the --verify command which does not work with detached signatures. The command expects the files to be verified either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for quick checking of many files. gpg --verify-files filenames Options Starting with GnuPG 1.1.92 (incl. GnuPG 1.2.1, 1.2.0 and 1.1.92), long options can be put in an options file (default \"~/.gnupg/gpg.conf\"). In GnuPG versions up through GnuPG 1.1.91 (incl. 1.0.6, 1.0.7, and 1.1.91), long options can be put in an \"old style\" configuration file (default \"~/.gnupg/options\"). Short option names will not work -- for example, armor is a valid option for the options file, while a is not. Do not write the 2 dashes, but simply the name of the option and any required arguments. Lines with a hash as the first non-white-space character are ignored. Commands may be put in this file too, but that does not make sense. Create ASCII armored output. gpg -a -e filename or gpg --armor -e filename Assume the input data is not in ASCII armored format. gpg --no-armor Use canonical text mode. If -t (but not --textmode) is used together with armoring and signing, this enables clearsigned messages. This kludge is needed for PGP compatibility; normally you would use --sign or --clearsign to selected the type of the signature. gpg -t or gpg --textmode Encrypt for user id name. If this option is not specified, GnuPG asks for the user-id unless --default-recipient is given. gpg -r nameofkey or gpg --recipient nameofkey Groups Set up a name group, which is similar to aliases in email programs. Any time the group name is a receipient (-r or --recipient), it will be expanded to the values specified. The values are key IDs or fingerprints, but any key description is accepted. Note that a value with spaces in it will be treated as two different values. Note also there is only one level of expansion -- you cannot make a group that points to another group. gpg --group name=value Use name as default recipient if option --recipient is not used and don't ask if this is a valid one. name must be non-empty. gpg --default-recipient nameofkey Use the default key as default recipient if option --recipient is not used and don't ask if this is a valid one. The default key is the first one from the secret keyring or the one set with --default-key. gpg --default-recipient-self Reset --default-recipient and --default-recipient-self. gpg --no-default-recipient Use name as default user ID for signatures. If this is not used the default user ID is the first user ID found in the secret keyring. gpg --default-key nameofkey Same as --recipient but this one is intended for use in the options file and may be used with your own user-id as an \"encrypt-to-self.\" These keys are only used when there are other recipients given either by use of --recipient or by the asked user id. No trust checking is performed for these user ids and even disabled keys can be used. gpg --encrypt-to name Disable the use of all --encrypt-to keys. gpg --no-encrypt-to Comments Versions Use string as comment string in clear text signatures. The default is not to write a comment string. gpg --comment string Force to write the standard comment string in clear text signatures. Use this to overwrite a --comment from a config file. This option is now obsolete because there is no default comment string anymore. gpg --default-comment Omit the version string in clear text signatures. gpg --no-version Force to write the version string in clear text signatures. Use this to overwrite a previous --no-version from a config file. gpg --emit-version Special \"for your eyes only\" Set the \"for your eyes only\" flag in the message. This causes GnuPG to refuse to save the file unless the --output option is given, and PGP to use the \"secure viewer\" with a Tempest-resistant font to display the message. This option overrides --set-filename. --for-your-eyes-only Resets the --for-your-eyes-only flag. --no-for-your-eyes-only Set compression level to n. A value of 0 for n disables compression. Default is to use the default compression level of zlib (normally 6). -z n, --compress n Skip the signature verification step. This may be used to make the decryption faster if the signature verification is not needed. --skip-verify When making a data signature, prompt for an expiration time. If this option is not specified, the expiration time is \"never.\" gpg --ask-sig-expire Resets the --ask-sig-expire option. gpg --no-ask-sig-expire Do not put the keyid into encrypted packets. This option hides the receiver of the message and is a countermeasure against traffic analysis. It may slow down the decryption process because all available secret keys are tried. gpg --throw-keyid Don't look at the key ID as stored in the message but try all secret keys in turn to find the right decryption key. This option forces the behaviour as used by anonymous recipients (created by using --throw-keyid) and might come handy in case where an encrypted message contains a bogus key ID. gpg --try-all-secrets Put the name value pair into the signature as notation data. Name must consist only of alphanumeric characters, digits or the underscore; the first character must not be a digit. Value may be any printable string; it will be encoded in UTF8, so you should check that your --charset is set correctly. If you prefix name with an exclamation mark, the notation data will be flagged as critical (rfc2440:5.2.3.15). gpg -N gpg --notation-data name=value This option changes the behavior of cleartext signatures so that they can be used for patch files. You should not send such an armored file via email because all spaces and line endings are hashed too. You can not use this option for data which has 5 dashes at the beginning of a line, patch files don't have this. A special armor header line tells GnuPG about this cleartext signature option. gpg --not-dash-escaped Because some mailers change lines starting with \"From \" to \" From \" it is good to handle such lines in a special way when creating cleartext signatures. All other PGP versions do it this way too. This option is not enabled by default because it would violate rfc2440. gpg --escape-from-lines Use string as the name of file which is stored in messages. gpg --set-filename string Try to create a file with a name as embedded in the data. This can be a dangerous option as it allows to overwrite files. gpg --use-embedded-filename This option enables a mode in which filenames of the form \"- n,\" where n is a non-negative decimal number, refer to the file descriptor n and not to a file with that name. gpg --enable-special-filenames Revoke a Key. gpg --gen-revoke THEKEYID revoked.key This creates a revocation certificate. To be able to do this, you need a secret key, otherwise anyone could revoke your certificate. This has one disadvantage. If you do not know the passphrase for the secret key, the revocation key will become useless and you cannot revoke the secret key! To overcome this problem it is wise to create a revoke license when you create a key pair. And if you do so, keep it safe! This can be on disk, paper, etc. Make sure that this certificate will not fall into wrong hands!!!! If you don't someone else can issue the revoke certificate for your key and make it useless. You will need to enter the revoke reason for the key and an optional comment. Once you have the revocation certificate, you will need to import it so that the key will get revoked. gpg --import revoked.key Type: gpg --list-keys and you will see that the key has been revoked. Next, you will have to send the revoked key to the key server. This is the same method as sending a normal key except this one has been revoked. When the server receives the revoked key, it will be removed from the server. Remove/Revoke a specific email address from your key. gpg --edit-key 01234567 uid 4 (This is the uid of the email address that you want to revoke). revuid Really revoke this user ID? (y/N) y Please select the reason for the revocation: 0 = No reason specified 4 = User ID is no longer valid Q = Cancel (Probably you want to select 4 here) Your decision? 4 Enter an optional description; end it with an empty line: Reason for revocation: User ID is no longer valid (No description given) Is this okay? (y/N) y You need a passphrase to unlock the secret key for user: \"John Doe john@doe.tld \" [ultimate] (1). John Doe john@doe.tld [ revoked] (2) John Doe (Corp) john.doe@corp.tld gpg save Next, send your updated key to the keyservers. gpg --send-keys 01234567 gpg: sending key 01234567 to hkp server keys.gnupg.net Key Administration: With the GnuPG system comes a file that acts as some kind of database. In this file all data regarding keys with the information that comes with the keys is stored. List all the keys: This will show you the key IDs and other information: gpg --list-keys To show the \"Short Key\" ID: gpg -K --with-fingerprint --with-colons | grep \"sec\" | cut -f5 -d ':' To show the \"HEX Key\" ID (last 16 characters with 0x prepended): gpg -K --with-fingerprint --with-colons | grep \"sec\" | cut -f5 -d ':'|awk '{print \"0x\" $1}' List all the keys and see the signatures as well type: gpg --list-sigs To see the fingerprints type: gpg --fingerprint You want to see \"Fingerprints\" to ensure that somebody is really the person they claim (like in a telephone call). This command will result in a list of relatively small numbers. To list the secret keys you type: gpg --list-secret-keys Note that listing fingerprints and signatures from private keys has no use whatsoever. To delete a public key you type: gpg --delete-key UID To delete a secret key you type: gpg --delete-secret-key (You have to delete the private key before deleting the public key) There is one more important command that is relevant for working with keys. gpg --edit-key HEX KEY ID Using this you can edit (among other things) the expiration date, add a fingerprint and sign your key. When in this mode you can press the question mark key to see the options available to you. Import a key: gpg --import filename You might get an error with the newer version of GPG (gpg: error building skey array: Permission denied) Try using (--batch): gpg --batch --import your.secret.key.asc Export your key: Export public key in binary format: gpg --export KEY ID Export public key in ascii format: gpg --export -a KEY ID Export secret key in binary format: gpg --export-secret-key KEY ID Export secret key in ascii format: gpg --export-secret-key -a KEY ID Source: https://www.gnupg.org/gph/en/manual/x110.html http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.5 https://www.gnupg.org/documentation/howtos.html https://github.com/rldutch1/pgp/blob/master/commandline_switches.html PGP Function: Here is a PGP function that I have created and use on my Mac and Linux computers (it works on Windows too with Git or Cygwin installed). I named it \"pgp\" so that it is different from gpg on Linux/Mac and will not conflict. pgp(){ clear case $1 in ascii) echo \"ASCII Encrypting... \" $2 gpg -a -e $2 echo \"...\" $2;rm -f $2 echo $2 \" has been deleted!\" ;; clearsign) echo \"Signing...\" $2 gpg --clearsign $2 echo $2 \" has an associated signature file!\" ;; decrypt) if [ ! $3 ]; then echo \"Syntax: pgp decrypt outputfile.txt encryptedfile.txt.asc\" else gpg --output $2 --decrypt $3 fi ;; delete-keys) echo \"Deleting...\" $2 gpg --delete-keys $2 gpg --list-keys ;; encrypt) echo \"Encrypting...\" $2 gpg --encrypt $2 echo \"...\" $2;rm -f $2 echo $2 \" has been deleted!\" ;; exportpublic) echo \"Exporting Public Key...\" $2 gpg --export --armor $2 $2.asc ;; exportprivate) echo \"Exporting PRIVATE KEY...\" $2 gpg --export --armor $2 $2.asc gpg --export-secret-keys --armor $2 $2.asc ;; fingerprint) gpg --fingerprint $2 ;; fingerprint_from_file) gpg --with-fingerprint $2 ;; import) echo \"Importing...\" $2 gpg --import $2 echo $2 \" has been imported!\" ;; list) gpg --list-keys ;; message) cd ~/Documents/PGP/messages xyzrh1=message.`date +\"%Y%m%d%H%M%S%Z\"` vi $xyzrh1.txt; pgp ascii $xyzrh1.txt ;; passencrypt) echo \"Encrypting...\" $2 gpg -c -s $2 echo $2 \" has been password encrypted!\" ;; releasecache) gpgconf --kill gpg-agent;gpgconf --launch gpg-agent ;; receivekeys) gpg --keyserver $2 --recv-keys $3 ;; sign) echo \"Signing...\" $2 gpg --sign $2 echo $2 \" has been signed!\" ;; sendkeys) if [ ! $2 ]; then echo \"Example: gpg --keyserver hkp://pgp.mit.edu --send-keys 6EE89C2D\" else gpg --keyserver $2 --send-keys $3 fi ;; update) gpg --update-trustdb ;; uue) echo \"UUEncoding...\" $2 uuencode $2 $2 $2.uue echo \"ASCII Encrypting...\" $2.uue gpg -a -e $2.uue echo \"...\" $2.uue;rm -f $2 $2.uue echo $2 \" has been deleted!\" ;; uuegpg) echo \"UUEncoding...\" $2 uuencode $2 $2 $2.uue echo \"Encrypting...\" $2.uue gpg --encrypt $2.uue echo \"...\" $2.uue;rm -f $2 $2.uue echo $2 \" has been deleted!\" ;; uuedecrypt) #echo \"Decrypting...\" $2 gpg --decrypt $2 $2.uue echo \"Decoding...\" $2 uudecode $2.uue; echo \"...\" $2.uue;rm -f $2.uue echo $2 \" has been decoded!\" ;; verify) echo \"Signing...\" $2 gpg --verify $2 echo $2 \" verify status!\" ;; *) message00=\"gpg --edit-key 5DD98B3E\" message01=\"pgp ascii textfile (gpg -a -e thefilename)\" message02=\"pgp clearsign textfile (gpg --clearsign thefilename)\" message03=\"pgp decrypt encryptedfile.tar.gpg (gpg -o outputfile -d encryptedfile)\" message04=\"pgp decrypto outputfile.tar encryptedfile.tar.gpg (gpg -o outputfile -d encryptedfile)\" message05=\"pgp delete-keys 5DD98B3E (gpg --delete-keys keyname)\" message06=\"pgp encrypt filename (gpg --encrypt thefilename)\" message07=\"pgp exportpublic keyname (gpg --export --armor thekeyname)\" message08=\"pgp exportprivate keyname (gpg --export-secret-keys --armor ABCD1234 ABCD1234.asc)\" message09=\"pgp fingerprint 5DD98B3E (gpg --fingerprint key)\" message10=\"pgp fingerprint_from_file file_with_key (gpg --with-fingerprint thefilename)\" message11=\"pgp import filename.asc (gpg --import keyfile)\" message12=\"pgp list (gpg --list-keys)\" message13=\"pgp message\" message14=\"pgp passencrypt textfile (gpg -c -s thefilename)\" message15=\"pgp receivekeys theservername thekeyname (gpg --keyserver keyserver.ubuntu.com --recv-keys 6EE89C2D)\" message16=\"pgp releasecache (gpgconf --kill gpg-agent;gpgconf --launch gpg-agent)\" message17=\"pgp sendkeys theservername thekeyname (gpg --keyserver hkp://pgp.mit.edu --send-keys 6EE89C2D)\" message18=\"pgp sign textfile (gpg --sign thefilename)\" message19=\"pgp update (gpg --update-trustdb)\" message20=\"pgp uue filename (uuencode thefilename thefilename thefilename.uue;gpg -a -e thefilename.uue)\" message21=\"pgp uuedecrypt filename (gpg --decrypt thefilename thefilename.uue;uudecode thefilename.uue)\" message22=\"pgp uuegpg filename (uuencode thefilename thefilename thefilename.uue;gpg --encrypt thefilename.uue)\" message23=\"pgp verify filename (gpg --verify signaturefile)\" echo $message00 echo $message01 echo $message02 echo $message03 echo $message04 echo $message05 echo $message06 echo $message07 echo $message08 echo $message09 echo $message10 echo $message11 echo $message12 echo $message13 echo $message14 echo $message15 echo $message16 echo $message17 echo $message18 echo $message19 echo $message20 echo $message21 echo $message22 echo $message23 echo \" \" ;; esac } View your trust database: View your trust database and see the marginal and other trust information type: gpg --update-trustdb Before a key can be trusted it must be signed and the trust level applied by the key owner. Marginally (Marginal) trusted keys can also be trusted if 3 or more people you trust have chosen to trust the same key that you have marginally trusted. Or if 3 or more marginally trusted people marginally trust the same key then it will be considered trusted by your key. GPG Privacy Assistant (GPA): Graphical user interface for GnuPG called GPG Privacy Assistant (GPA). It can be installed by typing: sudo apt-get -y install gpa sudo dnf -y install gpa Passphrase cache timeout: On Fedora Linux, the passphrase cache timeout was 300 seconds (5 minutes). I couldn't find where I could change that setting. I ended up installing dconf-editor and I was able to change the passphrase cache. I added screenshots (dconf-editor_settings##.png. I installed Open GnuPG on my Mac using: sudo port install gnupg2 I like it a lot better thant the GPG Suite that I was previously using because I can encrypt and decrypt from an SSH session without the GUI password prompt preventing me from decrypting something. I have also discovered that I no longer seem to be able to use the command 'gpg encryptedfile'. I get a message that says it doesn't understand what I am trying to do. I actually have to paste in the encrypted content and press control+d. gpgconf: gpgconf --kill gpg-agent gpgconf --launch gpg-agent gnome-keyring-daemon -r gpg-connect-agent How can I force the system to ask the passphrase every time? https://security.stackexchange.com/questions/103034/gnupg-decryption-not-asking-for-passphrase Old versions of GnuPG uses the gpg-agent, which caches the passphrase for a given time. Use the option --no-use-agent or add a line no-use-agent to ~/.gnupg/gpg.conf to prevent using the agent. Note: --no-use-agent is obsolete in gpg2 and has no effect. Removing the passphrase cacheing and setting it to 1 second. I haven't tried this but it has a green checkmark on stackexchange. Edit: ~/.gnupg/gpg-agent.conf Add: default-cache-ttl 1 max-cache-ttl 1 Reload the gpg agent: echo RELOADAGENT | gpg-connect-agent or Type: gpg-connect-agent At the prompt type: RELOADAGENT Response should be: OK At the prompt type: BYE Reponse should be: OK closing connection Restart the gpg agent: Type: gpg-connect-agent At the prompt type: KILLAGENT Reponse should be: OK closing connection List PGP/GPG directories: gpgconf --list-dirs Miscellaneous: gpg options --debug-level guru --debug-all --verbose gpg --debug-level guru --debug-all --verbose I was having trouble importing my private key because it was in an older version of GPG. I was getting the following errors: gpg: error building skey array: No such file or directory gpg import error sending to agent no such file or directory gpg: error building skey array: permission denied gpg: decryption failed: no secret key I had to decrypt my passphrase encrypted key using a user that did not have GPG enabled (root). I also renamed my .gnupg directory and ran gpg again so that a new .gnupg folder would get created. Inside that directory I had to manually create the private-keys-v1.d directory so the \"No such file or directory\" error would go away. I was still having issues and kept seeing a message telling me no private key present whenever I tried to decrypt something. I ended up restoring the .gnupg folder from a backup and restarting the gpg agent. Pinentry Running gpg through SSH session sometimes will error when performing tasks. When I used the pinentry-mode, the password was cached but I was able to decrypt. gpg --decrypt --pinentry-mode=loopback file gpg -c -s --pinentry-mode=loopback file Keybase error adding PGP/GPG key: https://github.com/keybase/client/issues/22458","title":"PGP"},{"location":"pgp/#generatecreate-gpgpgp-key","text":"gpg2 --full-gen-key gpg --gen-key","title":"Generate/Create GPG/PGP Key:"},{"location":"pgp/#send-key-to-default-key-server","text":"gpg --send-key KEYNAME You can upload your key to this PGP site: https://keyserver.pgp.com You can check if your key is on the PGP website here: https://keyserver.pgp.com","title":"Send key to default key server:"},{"location":"pgp/#to-send-your-public-key-to-a-keyserver","text":"gpg --keyserver the.keyserver.name.com --send-keys YOURKEYID Example: gpg --keyserver keyserver.ubuntu.com --send-keys 5DD98B3E Example: gpg --keyserver hkp://pgp.mit.edu --send-keys YOURKEYID Example: gpg --keyserver hkps.pool.sks-keyservers.net --send-keys YOURKEYID","title":"To send your public key to a keyserver:"},{"location":"pgp/#to-receive-a-public-key-from-a-keyserver","text":"gpg --keyserver the.keyserver.name.com --recv-keys THEKEYID Example: gpg --keyserver keyserver.ubuntu.com --recv-keys 5DD98B3E","title":"To receive a public key from a keyserver:"},{"location":"pgp/#export-ascii-armored-key","text":"gpg --export --armor jqdoe@example.com jqdoe-pubkey.asc gpg --export-secret-keys --armor jqdoe@example.com jqdoe-privkey.asc Use a double greater than symbol to export both public and private to the same file \" \".","title":"Export ascii armored key:"},{"location":"pgp/#encrypt-a-message-to-standard-output","text":"gpg -ea Enter your recipients and end with an empty line. Type your message that you want to encrypt. Press Control+D and your encrypted message will appear onscreen. If you want to encrypt the above message to a file you can type: gpg -ea filename.txt then do the steps above. Enter your recipients and end with an empty line. Type your message that you want to encrypt. Press Control+D and your encrypted message will be sent to filename.txt. Encrypt a single file (creates a binary file). This option may be combined with --sign. gpg -e filename or gpg --encrypt filename Encrypt a single file (creates an ASCII file). This option may be combined with --sign. gpg -a -e filename or gpg --armor --encrypt filename or gpg -ea filename This is a special version of the --encrypt command. The command expects the files to be encrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick encryption of multiple files. Encrypt multiple files. This option may be combined with --sign. gpg --encrypt-files file1 file2 file3 Encrypt with symmetric cipher only. This command asks for a passphrase. (May also be combined with --sign -- see GnuPG 1.0.7 released.) gpg -c filename or gpg --symmetric filename Encrypt to a recipient. gpg -e -r recipient filename or gpg --encrypt -r recipient filename or encrypt and sign. gpg -e -r recipient -s filename Use -u to specify the secret key to be used, and -r to specify the public key of the recipient. **Note: This doesn't seem to work when you have a default sender and recipient key established in gpg.conf. gpg -e -u \"Sender User Name\" -r \"Receiver User Name\" somefile Example 1: gpg -e -u \"me@example.com\" -r \"you@example.com\" -r \"them@example.com\" somefile Example 2: gpg -e -u \"Billy Bob\" -r \"Nancy Bob\" mydata.tar Example 3: gpg -s --default-key ABCD1234 -ea yyy.txt Password encrypt and sign a file: gpg -c -s filename Password encrypt and sign a message that can be decrypted by passphrase or secret key: gpg -c --sign --encrypt filename or gpg -c -s -e filename UUEncode a file before ascii encrypting: uuencode filename filename filename.uue gpg -a -e filename.uue UUEncode a file before normal encrypting: uuencode filename filename filename.uue gpg --encrypt filename.uue Decrypt UUEncoded file with normal encryption then UUDecode it: gpg --decrypt filename filename.uue uudecode filename.uue Decrypt a message in standard out (stout) type: gpg You will see a message similar to this: gpg: Go ahead and type your message ... At this point you can paste in the encrypted text and you will be prompted for your passphrase. Once you enter your passphrase, press Control+D to see the decrypted message. Decrypt file (or stdin if no file is specified) and write it to stdout (or the file specified with --output). If the decrypted file is signed, the signature is also verified. This command differs from the default operation, as it never writes to the filename which is included in the file and it rejects files which don't begin with an encrypted message. gpg --decrypt filenames Decrypt a file that has been binary or ascii encrypted and output the decrypted content to a file: gpg --output decrypted.txt --decrypt encrypted.txt.gpg or gpg -o decrypted.txt -d encrypted.txt.gpg This is a special version of the --decrypt command. The command expects the files to be decrypted either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for a quick decryption of multiple files. gpg --decrypt-files file1 file2 file3 Multiple Private Keys. When encrypting or decrypting it is possible to have more than one private key in use. To use a different private key other than the default use the option -u UID or use the option --local-user UID. This causes the default key used to be replaced by the wanted key. gpg -u KEY ID -r recipient --armor --sign --encrypt filename or gpg -u KEY ID -r recipient -a -s -e filename or (this should prompt you for recipients) gpg -u nameofprivatekey -a -s -e filename","title":"Encrypt a message to standard output:"},{"location":"pgp/#signing-verifying","text":"Make a signature. This command may be combined with --encrypt. (May also be combined with --symmetric (see GnuPG 1.0.7 released.) gpg -s filename or gpg --sign filename Both -s and --sign make an illegible signature that you can't read. This is OK because GPG/PGP can still read it (not humans).","title":"Signing / Verifying:"},{"location":"pgp/#make-a-clear-text-signature","text":"gpg --clearsign filename","title":"Make a clear text signature."},{"location":"pgp/#make-a-detached-signature","text":"gpg -b filename or gpg --detach-sign filename","title":"Make a detached signature."},{"location":"pgp/#verify-a-signature-file-without-generating-any-output","text":"With no arguments, the signature packet is read from stdin. If only a sigfile is given, it may be a complete signature or a detached signature, in which case the signed stuff is expected in a file without the \".sig\" or \".asc\" extension. With more than 1 argument, the first should be a detached signature and the remaining files are the signed stuff. To read the signed stuff from stdin, use - as the second filename. For security reasons a detached signature cannot read the signed material from stdin without denoting it in the above way. gpg --verify sigfile signed_files This is a special version of the --verify command which does not work with detached signatures. The command expects the files to be verified either on the command line or reads the filenames from stdin; each name must be on separate line. The command is intended for quick checking of many files. gpg --verify-files filenames","title":"Verify a signature file without generating any output."},{"location":"pgp/#options","text":"Starting with GnuPG 1.1.92 (incl. GnuPG 1.2.1, 1.2.0 and 1.1.92), long options can be put in an options file (default \"~/.gnupg/gpg.conf\"). In GnuPG versions up through GnuPG 1.1.91 (incl. 1.0.6, 1.0.7, and 1.1.91), long options can be put in an \"old style\" configuration file (default \"~/.gnupg/options\"). Short option names will not work -- for example, armor is a valid option for the options file, while a is not. Do not write the 2 dashes, but simply the name of the option and any required arguments. Lines with a hash as the first non-white-space character are ignored. Commands may be put in this file too, but that does not make sense.","title":"Options"},{"location":"pgp/#create-ascii-armored-output","text":"gpg -a -e filename or gpg --armor -e filename Assume the input data is not in ASCII armored format. gpg --no-armor Use canonical text mode. If -t (but not --textmode) is used together with armoring and signing, this enables clearsigned messages. This kludge is needed for PGP compatibility; normally you would use --sign or --clearsign to selected the type of the signature. gpg -t or gpg --textmode Encrypt for user id name. If this option is not specified, GnuPG asks for the user-id unless --default-recipient is given. gpg -r nameofkey or gpg --recipient nameofkey","title":"Create ASCII armored output."},{"location":"pgp/#groups","text":"Set up a name group, which is similar to aliases in email programs. Any time the group name is a receipient (-r or --recipient), it will be expanded to the values specified. The values are key IDs or fingerprints, but any key description is accepted. Note that a value with spaces in it will be treated as two different values. Note also there is only one level of expansion -- you cannot make a group that points to another group. gpg --group name=value Use name as default recipient if option --recipient is not used and don't ask if this is a valid one. name must be non-empty. gpg --default-recipient nameofkey Use the default key as default recipient if option --recipient is not used and don't ask if this is a valid one. The default key is the first one from the secret keyring or the one set with --default-key. gpg --default-recipient-self Reset --default-recipient and --default-recipient-self. gpg --no-default-recipient Use name as default user ID for signatures. If this is not used the default user ID is the first user ID found in the secret keyring. gpg --default-key nameofkey Same as --recipient but this one is intended for use in the options file and may be used with your own user-id as an \"encrypt-to-self.\" These keys are only used when there are other recipients given either by use of --recipient or by the asked user id. No trust checking is performed for these user ids and even disabled keys can be used. gpg --encrypt-to name Disable the use of all --encrypt-to keys. gpg --no-encrypt-to","title":"Groups"},{"location":"pgp/#comments-versions","text":"Use string as comment string in clear text signatures. The default is not to write a comment string. gpg --comment string Force to write the standard comment string in clear text signatures. Use this to overwrite a --comment from a config file. This option is now obsolete because there is no default comment string anymore. gpg --default-comment Omit the version string in clear text signatures. gpg --no-version Force to write the version string in clear text signatures. Use this to overwrite a previous --no-version from a config file. gpg --emit-version","title":"Comments &amp; Versions"},{"location":"pgp/#special-for-your-eyes-only","text":"Set the \"for your eyes only\" flag in the message. This causes GnuPG to refuse to save the file unless the --output option is given, and PGP to use the \"secure viewer\" with a Tempest-resistant font to display the message. This option overrides --set-filename. --for-your-eyes-only Resets the --for-your-eyes-only flag. --no-for-your-eyes-only Set compression level to n. A value of 0 for n disables compression. Default is to use the default compression level of zlib (normally 6). -z n, --compress n Skip the signature verification step. This may be used to make the decryption faster if the signature verification is not needed. --skip-verify When making a data signature, prompt for an expiration time. If this option is not specified, the expiration time is \"never.\" gpg --ask-sig-expire Resets the --ask-sig-expire option. gpg --no-ask-sig-expire Do not put the keyid into encrypted packets. This option hides the receiver of the message and is a countermeasure against traffic analysis. It may slow down the decryption process because all available secret keys are tried. gpg --throw-keyid Don't look at the key ID as stored in the message but try all secret keys in turn to find the right decryption key. This option forces the behaviour as used by anonymous recipients (created by using --throw-keyid) and might come handy in case where an encrypted message contains a bogus key ID. gpg --try-all-secrets Put the name value pair into the signature as notation data. Name must consist only of alphanumeric characters, digits or the underscore; the first character must not be a digit. Value may be any printable string; it will be encoded in UTF8, so you should check that your --charset is set correctly. If you prefix name with an exclamation mark, the notation data will be flagged as critical (rfc2440:5.2.3.15). gpg -N gpg --notation-data name=value This option changes the behavior of cleartext signatures so that they can be used for patch files. You should not send such an armored file via email because all spaces and line endings are hashed too. You can not use this option for data which has 5 dashes at the beginning of a line, patch files don't have this. A special armor header line tells GnuPG about this cleartext signature option. gpg --not-dash-escaped Because some mailers change lines starting with \"From \" to \" From \" it is good to handle such lines in a special way when creating cleartext signatures. All other PGP versions do it this way too. This option is not enabled by default because it would violate rfc2440. gpg --escape-from-lines Use string as the name of file which is stored in messages. gpg --set-filename string Try to create a file with a name as embedded in the data. This can be a dangerous option as it allows to overwrite files. gpg --use-embedded-filename This option enables a mode in which filenames of the form \"- n,\" where n is a non-negative decimal number, refer to the file descriptor n and not to a file with that name. gpg --enable-special-filenames","title":"Special \"for your eyes only\""},{"location":"pgp/#revoke-a-key","text":"gpg --gen-revoke THEKEYID revoked.key This creates a revocation certificate. To be able to do this, you need a secret key, otherwise anyone could revoke your certificate. This has one disadvantage. If you do not know the passphrase for the secret key, the revocation key will become useless and you cannot revoke the secret key! To overcome this problem it is wise to create a revoke license when you create a key pair. And if you do so, keep it safe! This can be on disk, paper, etc. Make sure that this certificate will not fall into wrong hands!!!! If you don't someone else can issue the revoke certificate for your key and make it useless. You will need to enter the revoke reason for the key and an optional comment. Once you have the revocation certificate, you will need to import it so that the key will get revoked. gpg --import revoked.key Type: gpg --list-keys and you will see that the key has been revoked. Next, you will have to send the revoked key to the key server. This is the same method as sending a normal key except this one has been revoked. When the server receives the revoked key, it will be removed from the server.","title":"Revoke a Key."},{"location":"pgp/#removerevoke-a-specific-email-address-from-your-key","text":"gpg --edit-key 01234567 uid 4 (This is the uid of the email address that you want to revoke). revuid Really revoke this user ID? (y/N) y Please select the reason for the revocation: 0 = No reason specified 4 = User ID is no longer valid Q = Cancel (Probably you want to select 4 here) Your decision? 4 Enter an optional description; end it with an empty line: Reason for revocation: User ID is no longer valid (No description given) Is this okay? (y/N) y You need a passphrase to unlock the secret key for user: \"John Doe john@doe.tld \" [ultimate] (1). John Doe john@doe.tld [ revoked] (2) John Doe (Corp) john.doe@corp.tld gpg save Next, send your updated key to the keyservers. gpg --send-keys 01234567 gpg: sending key 01234567 to hkp server keys.gnupg.net","title":"Remove/Revoke a specific email address from your key."},{"location":"pgp/#key-administration","text":"With the GnuPG system comes a file that acts as some kind of database. In this file all data regarding keys with the information that comes with the keys is stored.","title":"Key Administration:"},{"location":"pgp/#list-all-the-keys","text":"This will show you the key IDs and other information: gpg --list-keys To show the \"Short Key\" ID: gpg -K --with-fingerprint --with-colons | grep \"sec\" | cut -f5 -d ':' To show the \"HEX Key\" ID (last 16 characters with 0x prepended): gpg -K --with-fingerprint --with-colons | grep \"sec\" | cut -f5 -d ':'|awk '{print \"0x\" $1}' List all the keys and see the signatures as well type: gpg --list-sigs To see the fingerprints type: gpg --fingerprint You want to see \"Fingerprints\" to ensure that somebody is really the person they claim (like in a telephone call). This command will result in a list of relatively small numbers. To list the secret keys you type: gpg --list-secret-keys Note that listing fingerprints and signatures from private keys has no use whatsoever. To delete a public key you type: gpg --delete-key UID To delete a secret key you type: gpg --delete-secret-key (You have to delete the private key before deleting the public key) There is one more important command that is relevant for working with keys. gpg --edit-key HEX KEY ID Using this you can edit (among other things) the expiration date, add a fingerprint and sign your key. When in this mode you can press the question mark key to see the options available to you. Import a key: gpg --import filename You might get an error with the newer version of GPG (gpg: error building skey array: Permission denied) Try using (--batch): gpg --batch --import your.secret.key.asc Export your key: Export public key in binary format: gpg --export KEY ID Export public key in ascii format: gpg --export -a KEY ID Export secret key in binary format: gpg --export-secret-key KEY ID Export secret key in ascii format: gpg --export-secret-key -a KEY ID","title":"List all the keys:"},{"location":"pgp/#source","text":"https://www.gnupg.org/gph/en/manual/x110.html http://www.dewinter.com/gnupg_howto/english/GPGMiniHowto-3.html#ss3.5 https://www.gnupg.org/documentation/howtos.html https://github.com/rldutch1/pgp/blob/master/commandline_switches.html","title":"Source:"},{"location":"pgp/#pgp-function","text":"Here is a PGP function that I have created and use on my Mac and Linux computers (it works on Windows too with Git or Cygwin installed). I named it \"pgp\" so that it is different from gpg on Linux/Mac and will not conflict. pgp(){ clear case $1 in ascii) echo \"ASCII Encrypting... \" $2 gpg -a -e $2 echo \"...\" $2;rm -f $2 echo $2 \" has been deleted!\" ;; clearsign) echo \"Signing...\" $2 gpg --clearsign $2 echo $2 \" has an associated signature file!\" ;; decrypt) if [ ! $3 ]; then echo \"Syntax: pgp decrypt outputfile.txt encryptedfile.txt.asc\" else gpg --output $2 --decrypt $3 fi ;; delete-keys) echo \"Deleting...\" $2 gpg --delete-keys $2 gpg --list-keys ;; encrypt) echo \"Encrypting...\" $2 gpg --encrypt $2 echo \"...\" $2;rm -f $2 echo $2 \" has been deleted!\" ;; exportpublic) echo \"Exporting Public Key...\" $2 gpg --export --armor $2 $2.asc ;; exportprivate) echo \"Exporting PRIVATE KEY...\" $2 gpg --export --armor $2 $2.asc gpg --export-secret-keys --armor $2 $2.asc ;; fingerprint) gpg --fingerprint $2 ;; fingerprint_from_file) gpg --with-fingerprint $2 ;; import) echo \"Importing...\" $2 gpg --import $2 echo $2 \" has been imported!\" ;; list) gpg --list-keys ;; message) cd ~/Documents/PGP/messages xyzrh1=message.`date +\"%Y%m%d%H%M%S%Z\"` vi $xyzrh1.txt; pgp ascii $xyzrh1.txt ;; passencrypt) echo \"Encrypting...\" $2 gpg -c -s $2 echo $2 \" has been password encrypted!\" ;; releasecache) gpgconf --kill gpg-agent;gpgconf --launch gpg-agent ;; receivekeys) gpg --keyserver $2 --recv-keys $3 ;; sign) echo \"Signing...\" $2 gpg --sign $2 echo $2 \" has been signed!\" ;; sendkeys) if [ ! $2 ]; then echo \"Example: gpg --keyserver hkp://pgp.mit.edu --send-keys 6EE89C2D\" else gpg --keyserver $2 --send-keys $3 fi ;; update) gpg --update-trustdb ;; uue) echo \"UUEncoding...\" $2 uuencode $2 $2 $2.uue echo \"ASCII Encrypting...\" $2.uue gpg -a -e $2.uue echo \"...\" $2.uue;rm -f $2 $2.uue echo $2 \" has been deleted!\" ;; uuegpg) echo \"UUEncoding...\" $2 uuencode $2 $2 $2.uue echo \"Encrypting...\" $2.uue gpg --encrypt $2.uue echo \"...\" $2.uue;rm -f $2 $2.uue echo $2 \" has been deleted!\" ;; uuedecrypt) #echo \"Decrypting...\" $2 gpg --decrypt $2 $2.uue echo \"Decoding...\" $2 uudecode $2.uue; echo \"...\" $2.uue;rm -f $2.uue echo $2 \" has been decoded!\" ;; verify) echo \"Signing...\" $2 gpg --verify $2 echo $2 \" verify status!\" ;; *) message00=\"gpg --edit-key 5DD98B3E\" message01=\"pgp ascii textfile (gpg -a -e thefilename)\" message02=\"pgp clearsign textfile (gpg --clearsign thefilename)\" message03=\"pgp decrypt encryptedfile.tar.gpg (gpg -o outputfile -d encryptedfile)\" message04=\"pgp decrypto outputfile.tar encryptedfile.tar.gpg (gpg -o outputfile -d encryptedfile)\" message05=\"pgp delete-keys 5DD98B3E (gpg --delete-keys keyname)\" message06=\"pgp encrypt filename (gpg --encrypt thefilename)\" message07=\"pgp exportpublic keyname (gpg --export --armor thekeyname)\" message08=\"pgp exportprivate keyname (gpg --export-secret-keys --armor ABCD1234 ABCD1234.asc)\" message09=\"pgp fingerprint 5DD98B3E (gpg --fingerprint key)\" message10=\"pgp fingerprint_from_file file_with_key (gpg --with-fingerprint thefilename)\" message11=\"pgp import filename.asc (gpg --import keyfile)\" message12=\"pgp list (gpg --list-keys)\" message13=\"pgp message\" message14=\"pgp passencrypt textfile (gpg -c -s thefilename)\" message15=\"pgp receivekeys theservername thekeyname (gpg --keyserver keyserver.ubuntu.com --recv-keys 6EE89C2D)\" message16=\"pgp releasecache (gpgconf --kill gpg-agent;gpgconf --launch gpg-agent)\" message17=\"pgp sendkeys theservername thekeyname (gpg --keyserver hkp://pgp.mit.edu --send-keys 6EE89C2D)\" message18=\"pgp sign textfile (gpg --sign thefilename)\" message19=\"pgp update (gpg --update-trustdb)\" message20=\"pgp uue filename (uuencode thefilename thefilename thefilename.uue;gpg -a -e thefilename.uue)\" message21=\"pgp uuedecrypt filename (gpg --decrypt thefilename thefilename.uue;uudecode thefilename.uue)\" message22=\"pgp uuegpg filename (uuencode thefilename thefilename thefilename.uue;gpg --encrypt thefilename.uue)\" message23=\"pgp verify filename (gpg --verify signaturefile)\" echo $message00 echo $message01 echo $message02 echo $message03 echo $message04 echo $message05 echo $message06 echo $message07 echo $message08 echo $message09 echo $message10 echo $message11 echo $message12 echo $message13 echo $message14 echo $message15 echo $message16 echo $message17 echo $message18 echo $message19 echo $message20 echo $message21 echo $message22 echo $message23 echo \" \" ;; esac }","title":"PGP Function:"},{"location":"pgp/#view-your-trust-database","text":"View your trust database and see the marginal and other trust information type: gpg --update-trustdb Before a key can be trusted it must be signed and the trust level applied by the key owner. Marginally (Marginal) trusted keys can also be trusted if 3 or more people you trust have chosen to trust the same key that you have marginally trusted. Or if 3 or more marginally trusted people marginally trust the same key then it will be considered trusted by your key.","title":"View your trust database:"},{"location":"pgp/#gpg-privacy-assistant-gpa","text":"Graphical user interface for GnuPG called GPG Privacy Assistant (GPA). It can be installed by typing: sudo apt-get -y install gpa sudo dnf -y install gpa","title":"GPG Privacy Assistant (GPA):"},{"location":"pgp/#passphrase-cache-timeout","text":"On Fedora Linux, the passphrase cache timeout was 300 seconds (5 minutes). I couldn't find where I could change that setting. I ended up installing dconf-editor and I was able to change the passphrase cache. I added screenshots (dconf-editor_settings##.png. I installed Open GnuPG on my Mac using: sudo port install gnupg2 I like it a lot better thant the GPG Suite that I was previously using because I can encrypt and decrypt from an SSH session without the GUI password prompt preventing me from decrypting something. I have also discovered that I no longer seem to be able to use the command 'gpg encryptedfile'. I get a message that says it doesn't understand what I am trying to do. I actually have to paste in the encrypted content and press control+d.","title":"Passphrase cache timeout:"},{"location":"pgp/#gpgconf","text":"gpgconf --kill gpg-agent gpgconf --launch gpg-agent gnome-keyring-daemon -r gpg-connect-agent How can I force the system to ask the passphrase every time? https://security.stackexchange.com/questions/103034/gnupg-decryption-not-asking-for-passphrase Old versions of GnuPG uses the gpg-agent, which caches the passphrase for a given time. Use the option --no-use-agent or add a line no-use-agent to ~/.gnupg/gpg.conf to prevent using the agent. Note: --no-use-agent is obsolete in gpg2 and has no effect. Removing the passphrase cacheing and setting it to 1 second. I haven't tried this but it has a green checkmark on stackexchange. Edit: ~/.gnupg/gpg-agent.conf Add: default-cache-ttl 1 max-cache-ttl 1","title":"gpgconf:"},{"location":"pgp/#reload-the-gpg-agent","text":"echo RELOADAGENT | gpg-connect-agent or Type: gpg-connect-agent At the prompt type: RELOADAGENT Response should be: OK At the prompt type: BYE Reponse should be: OK closing connection","title":"Reload the gpg agent:"},{"location":"pgp/#restart-the-gpg-agent","text":"Type: gpg-connect-agent At the prompt type: KILLAGENT Reponse should be: OK closing connection","title":"Restart the gpg agent:"},{"location":"pgp/#list-pgpgpg-directories","text":"gpgconf --list-dirs","title":"List PGP/GPG directories:"},{"location":"pgp/#miscellaneous","text":"gpg options --debug-level guru --debug-all --verbose gpg --debug-level guru --debug-all --verbose I was having trouble importing my private key because it was in an older version of GPG. I was getting the following errors: gpg: error building skey array: No such file or directory gpg import error sending to agent no such file or directory gpg: error building skey array: permission denied gpg: decryption failed: no secret key I had to decrypt my passphrase encrypted key using a user that did not have GPG enabled (root). I also renamed my .gnupg directory and ran gpg again so that a new .gnupg folder would get created. Inside that directory I had to manually create the private-keys-v1.d directory so the \"No such file or directory\" error would go away. I was still having issues and kept seeing a message telling me no private key present whenever I tried to decrypt something. I ended up restoring the .gnupg folder from a backup and restarting the gpg agent.","title":"Miscellaneous:"},{"location":"pgp/#pinentry","text":"Running gpg through SSH session sometimes will error when performing tasks. When I used the pinentry-mode, the password was cached but I was able to decrypt. gpg --decrypt --pinentry-mode=loopback file gpg -c -s --pinentry-mode=loopback file","title":"Pinentry"},{"location":"pgp/#keybase-error-adding-pgpgpg-key","text":"https://github.com/keybase/client/issues/22458","title":"Keybase error adding PGP/GPG key:"},{"location":"sql/","text":"DDL (Data Definition Language) refers to the CREATE, ALTER and DROP statements DDL allows to add / modify / delete the logical structures which contain the data or which allow users to access / maintain the data (databases, tables, keys, views...). DDL is about \"metadata\". DML (Data Manipulation Language) refers to the INSERT, UPDATE and DELETE statements DML allows to add / modify / delete data itself. DQL (Data Query Language) refers to the SELECT, SHOW and HELP statements (queries) SELECT is the main DQL instruction. It retrieves data you need. SHOW retrieves information about the metadata. HELP... is for people who need help. DCL (Data Control Language) refers to the GRANT and REVOKE statements DCL is used to grant / revoke permissions on databases and their contents. DCL is simple, but MySQL's permissions are rather complex. DCL is about security. DTL (Data Transaction Language) refers to the START TRANSACTION, SAVEPOINT, COMMIT and ROLLBACK [TO SAVEPOINT] statements DTL is used to manage transactions (operations which include more instructions none of which can be executed if one of them fails). Data Definition Language (DDL) statements are used to define the database structure or schema. Some examples: CREATE - to create objects in the database ALTER - alters the structure of the database DROP - delete objects from the database TRUNCATE - remove all records from a table, including all spaces allocated for the records are removed. The operation cannot be rolled back. COMMENT - add comments to the data dictionary RENAME - rename an object DML Data Manipulation Language (DML) statements are used for managing data within schema objects. Some examples: SELECT - retrieve data from the a database INSERT - insert data into a table UPDATE - updates existing data within a table DELETE - deletes all records from a table, the space for the records remain. Can be rolled back. Must me committed to make changes permanent. MERGE - UPSERT operation (insert or update) CALL - call a PL/SQL or Java subprogram EXPLAIN PLAN - explain access path to data LOCK TABLE - control concurrency DCL Data Control Language (DCL) statements. Some examples: GRANT - gives user's access privileges to database REVOKE - withdraw access privileges given with the GRANT command TCL Transaction Control (TCL) statements are used to manage the changes made by DML statements. It allows statements to be grouped together into logical transactions. COMMIT - save work done SAVEPOINT - identify a point in a transaction to which you can later roll back ROLLBACK - restore database to original since the last COMMIT SET TRANSACTION - Change transaction options like isolation level and what rollback segment to use Note: DROP and TRUNCATE are DDL commands, whereas DELETE is a DML command. Therefore DELETE operations can be rolled back (undone), while DROP and TRUNCATE operations cannot be rolled back.","title":"SQL"}]}